(this.webpackJsonp=this.webpackJsonp||[]).push([[4],{447:function(t,e,o){"use strict";o.r(e);var a=function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("div",{staticClass:"wrapper"},[o("div",{staticClass:"column condition",class:{collapsed:t.collapseSearchConditions}},[o("div",{staticClass:"inner-wrapper"},[o("h4",[t._v("Species:")]),t._v(" "),o("div",{staticClass:"row",staticStyle:{"margin-bottom":"8px"}},[o("a-spin",{staticStyle:{flex:"1 1","min-width":"0"},attrs:{spinning:t.loading}},[o("a-select",{staticStyle:{width:"100%"},attrs:{placeholder:"any","show-search":""},model:{value:t.keyword,callback:function(e){t.keyword=e},expression:"keyword"}},[o("a-select-option",{key:""},[t._v("any")]),t._v(" "),t._l(t.tags,(function(e){return o("a-select-option",{key:e},[t._v(t._s(e))])}))],2)],1),t._v(" "),o("a-button",{attrs:{type:"primary"},on:{click:t.search}},[t._v("Search")])],1),t._v(" "),o("h4",[t._v("Direction: (skull type does not affect search results)")]),t._v(" "),o("div",{staticClass:"row"},[o("a-select",{staticStyle:{width:"100%"},attrs:{"show-search":""},model:{value:t.model.url,callback:function(e){t.$set(t.model,"url",e)},expression:"model.url"}},t._l(t.models,(function(e){return o("a-select-option",{key:e.path,attrs:{value:e.path}},[t._v("\n                        "+t._s(e.name)+"\n                    ")])})),1)],1),t._v(" "),o("model-viewer",{attrs:{"model-url":t.model.url,"rotate-x":t.model.rotateX,"rotate-y":t.model.rotateY,"rotate-z":t.model.rotateZ,zoom:t.model.zoom,width:t.modelViewerSize,height:t.modelViewerSize},on:{"update:rotateX":function(e){return t.$set(t.model,"rotateX",e)},"update:rotate-x":function(e){return t.$set(t.model,"rotateX",e)},"update:rotateY":function(e){return t.$set(t.model,"rotateY",e)},"update:rotate-y":function(e){return t.$set(t.model,"rotateY",e)},"update:rotateZ":function(e){return t.$set(t.model,"rotateZ",e)},"update:rotate-z":function(e){return t.$set(t.model,"rotateZ",e)},"update:zoom":function(e){return t.$set(t.model,"zoom",e)}}},[t.modelAuthorLink?o("a",{staticStyle:{position:"absolute",right:"8px",top:"8px","line-height":"14px"},attrs:{target:"_blank",title:"Author of this model",href:t.modelAuthorLink}},[o("a-icon",{attrs:{type:"info-circle"}})],1):t._e()]),t._v(" "),o("div",{staticClass:"row"},[o("span",[t._v("X: "+t._s(t.model.rotateX)+"; Y: "+t._s(t.model.rotateY)+"; Z: ")]),t._v(" "),o("a-slider",{staticStyle:{flex:"1 1","min-width":"0"},attrs:{included:!1,min:-180,max:180},model:{value:t.model.rotateZ,callback:function(e){t.$set(t.model,"rotateZ",e)},expression:"model.rotateZ"}}),t._v(" "),o("div",[o("span",{staticStyle:{width:"2.5em","text-align":"center",display:"inline-block"}},[t._v(t._s(t.model.rotateZ))]),t._v(" "),o("a-button",{attrs:{size:"small"},on:{click:function(e){t.model.rotateX=t.model.rotateY=t.model.rotateZ=0}}},[t._v("\n                        Reset\n                    ")])],1)],1),t._v(" "),t._m(0)],1),t._v(" "),o("div",{staticClass:"collapse-handler",on:{click:function(e){t.collapseSearchConditions=!t.collapseSearchConditions}}},[o("a-icon",{staticClass:"icon",attrs:{type:"up"}})],1)]),t._v(" "),o("div",{staticClass:"column result"},[o("div",{staticClass:"list"},t._l(t.result,(function(e){return o("image-thumb",{key:e.url,staticClass:"item",attrs:{image:e,size:200},nativeOn:{click:function(o){return t.show(e)}}})})),1)]),t._v(" "),o("image-viewer",{attrs:{show:t.large.show,"image-url":t.large.imageUrl,flip:t.large.flip,id:t.large.id,author:t.large.author,source:t.large.source},on:{"update:show":function(e){return t.$set(t.large,"show",e)}}})],1)};a._withStripped=!0;var i=o(11),r=function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("a-spin",{staticClass:"thumb",attrs:{spinning:t.loading}},[o("div",{staticClass:"thumb-inner-wrapper",class:{flip:this.image&&t.image.flip},style:{width:t.size+"px",height:t.size+"px"}},[t.image&&t.image.url?o("img",{style:t.imgStyle,attrs:{src:t.image.url,alt:""}}):t._e(),t._v(" "),t._t("default")],2)])};r._withStripped=!0;class n extends(i.a.extend({data:()=>({loading:!1,handlerRemoved:!1}),props:{image:Object,size:{type:Number,default:160}},computed:{imgStyle(){const t=this.image;if(!t||!t.url)return{};const e=1/t.cs*this.size;return{width:t.w*e+"px",height:t.h*e+"px",left:-t.cx*e+"px",top:-t.cy*e+"px"}}},mounted(){const t=this.parent=function t(e){if(null!=e)return e.scrollHeight>e.clientHeight?e:t(e.parentNode)}(this.$el);document.addEventListener("scroll",this.checkVisibilityChange,!1),document.addEventListener("resize",this.checkVisibilityChange,!1),null==t||t.addEventListener("scroll",this.checkVisibilityChange,!1),this.checkVisibilityChange()},methods:{checkVisibilityChange(){var t;if(function(t){const e=t.getBoundingClientRect(),o=e.right-e.left,a=e.bottom-e.top;return e.top>-a&&e.left>-o&&e.bottom<(window.innerHeight||document.documentElement.clientHeight)+a&&e.right<(window.innerWidth||document.documentElement.clientWidth)+o}(this.$el)){this.loading=!0;const e=new Image;e.onload=()=>{this.loading=!1},e.onerror=()=>{this.loading=!1},e.src=null===(t=this.image)||void 0===t?void 0:t.url,this.removeHandlers()}},removeHandlers(){var t;if(this.handlerRemoved)return;document.removeEventListener("scroll",this.checkVisibilityChange),document.removeEventListener("resize",this.checkVisibilityChange);null===(t=this.parent)||void 0===t||t.removeEventListener("scroll",this.checkVisibilityChange),this.handlerRemoved=!0}}})){}var s=n,l=(o(476),o(104)),c=Object(l.a)(s,r,[],!1,null,"3e22842a",null);c.options.__file="src/components/ImageThumb.vue";var d=c.exports,h=function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("div",{staticClass:"image-viewer-mask"},[t.show?o("div",{staticClass:"image-viewer",on:{click:function(e){return e.target!==e.currentTarget?null:t.close(e)}}},[o("img",{style:t.imgStyle,attrs:{src:t.imageUrl,alt:""}}),t._v(" "),o("div",{staticClass:"btn-close",on:{click:t.close}},[o("a-icon",{attrs:{type:"close"}})],1),t._v(" "),o("div",{staticClass:"author-info"},[t.author?o("div",[t._v("\n                Photo by "),o("a",{attrs:{href:t.authorLink,target:"_blank"}},[t._v(t._s(t.author))]),t._v("\n                on "),o("a",{attrs:{href:t.sourceLink,target:"_blank"}},[t._v(t._s(t.sourceType))])]):t._e(),t._v(" "),!t.author&&t.sourceType?o("div",[o("a",{attrs:{href:t.authorLink,target:"_blank"}},[t._v("View this photo on "+t._s(t.sourceType))])]):t._e()])]):t._e()])};h._withStripped=!0;var u=o(453);class m extends(i.a.extend({props:{show:Boolean,imageUrl:String,id:String,author:String,source:String,flip:{type:Boolean,default:!1}},data:()=>({width:0,height:0,zoom:1}),watch:{imageUrl(t){this.width=0,this.height=0,this.zoom=1;const e=new Image;e.onload=()=>{this.width=e.width,this.height=e.height;const t=.9*document.documentElement.clientWidth,o=.9*document.documentElement.clientHeight;this.zoom=Math.min(t/e.width,o/e.height,1)},e.src=t}},computed:{imgStyle(){return{"margin-left":-(this.width/2|0)+"px","margin-top":-(this.height/2|0)+"px",transform:`scaleX(${this.zoom*(this.flip?-1:1)}) scaleY(${this.zoom})`}},sourceType(){return Object(u.d)(this.imageUrl)},sourceLink(){return Object(u.e)(this.sourceType)||""},authorLink(){return Object(u.b)(this.sourceType,this.id,this.source)}},methods:{close(){this.$emit("update:show",!1)}}})){}var p=m,f=(o(495),Object(l.a)(p,h,[],!1,null,"5567e6cd",null));f.options.__file="src/components/ImageViewer.vue";var g=f.exports,v=o(460),b=o(458),k=o(459),w=function(t,e,o,a){return new(o||(o=Promise))((function(i,r){function n(t){try{l(a.next(t))}catch(t){r(t)}}function s(t){try{l(a.throw(t))}catch(t){r(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(n,s)}l((a=a.apply(t,e||[])).next())}))};class x extends(i.a.extend({components:{ModelViewer:v.a,ImageThumb:d,ImageViewer:g},data:()=>({loading:!1,modelViewerSize:360,models:b.a,data:[],model:{url:b.a[0].path,rotateX:0,rotateY:0,rotateZ:0,zoom:10},keyword:"",result:[],collapseSearchConditions:!1,large:{show:!1,imageUrl:"",flip:!1,id:"",author:"",source:""}}),computed:{tags(){const t={};return this.data.forEach(e=>e.tags.forEach(e=>{t[e]=!0})),Object.keys(t).sort()},modelAuthorLink(){var t;return(null===(t=this.models.find(t=>t.path===this.model.url))||void 0===t?void 0:t.origin)||""}},mounted(){return w(this,void 0,void 0,(function*(){try{this.loading=!0,this.data=(yield o.e(0).then(o.bind(null,503))).default}finally{this.loading=!1}}))},methods:{search(){let t=this.keyword?this.data.filter(t=>{var e;return null===(e=t.tags)||void 0===e?void 0:e.includes(this.keyword)}):this.data;const e=Object(k.a)(this.model.rotateX+180,this.model.rotateY+180,this.model.rotateZ+180),o=t.map(t=>{const o=t.ry*this.model.rotateY<0,a=t.rx,i=o?-t.ry:t.ry,r=o?-t.rz:t.rz,n=Object(k.b)(e,Object(k.a)(a+180,i+180,r+180));return Object.assign(Object.assign({},t),{flip:o,ry:i,rz:r,match:n})});o.sort((t,e)=>t.match-e.match),this.result=o.slice(0,Math.min(o.length,30)),this.collapseSearchConditions=!0},show(t){this.large.imageUrl=t.url,this.large.flip=t.flip,this.large.show=!0,this.large.id=Object(u.c)(t)||"",this.large.author=t.au||"",this.large.source=t.src||""}}})){}var y=x,_=(o(497),Object(l.a)(y,a,[function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("div",{staticClass:"info",staticStyle:{color:"#bfbfbf"}},[o("div",[t._v("Author: x6udpngx")]),t._v(" "),o("div",[t._v("\n                    Special Thanks: "),o("a",{attrs:{href:"https://github.com/xrabohrok",target:"_blank"}},[t._v("xrabohrok")]),t._v("\n                    - Thank you for helping improve this tool!\n                ")]),t._v(" "),o("div",[t._v("Latest update: 2021-12-03")]),t._v(" "),o("div",[o("a",{attrs:{href:"https://github.com/x6ud/x6ud.github.io/issues",target:"_blank"}},[t._v("Leave a message")])]),t._v(" "),o("div",[o("a",{attrs:{href:"https://github.com/x6ud/search-photos-by-model-tool",target:"_blank"}},[t._v("Source code")])]),t._v(" "),o("div",[o("span",[t._v("Support me:")]),t._v(" "),o("a",{attrs:{href:"https://ko-fi.com/x6udpngx",target:"_blank"}},[o("span",{staticStyle:{"vertical-align":"middle"}},[t._v("Ko-fi.com/x6udpngx")])])])])}],!1,null,"1a1d373c",null));_.options.__file="src/views/Search.vue";e.default=_.exports},451:function(t,e,o){var a=o(457);"string"==typeof a&&(a=[[t.i,a,""]]),a.locals&&(t.exports=a.locals);(0,o(450).default)("635b7542",a,!1,{})},452:function(t,e,o){"use strict";o.d(e,"a",(function(){return l})),o.d(e,"b",(function(){return c})),o.d(e,"c",(function(){return d}));var a=o(454),i=o.n(a),r=function(t,e,o,a){return new(o||(o=Promise))((function(i,r){function n(t){try{l(a.next(t))}catch(t){r(t)}}function s(t){try{l(a.throw(t))}catch(t){r(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(n,s)}l((a=a.apply(t,e||[])).next())}))};function n(t,e,o,a){return`https://farm${t}.static.flickr.com/${e}/${o}_${a}`}function s(t){const e=t.match(/farm([0-9]+)\.static\.flickr\.com\/([0-9]+)\/([0-9]+)_([0-9a-z]+)/);return e?{farm:Number(e[1]),server:e[2],id:e[3],secret:e[4]}:null}function l(t,e,o,a){return r(this,void 0,void 0,(function*(){const r="https://api.flickr.com/services/rest/?"+new URLSearchParams({method:"flickr.photos.search",api_key:t,format:"json",nojsoncallback:"1",license:"2,3,4,5,6,9",privacy_filter:"1",content_type:"1",text:e,sort:"relevance",per_page:Math.max(1,Math.min(500,o))+"",page:a+""}).toString(),s=(yield i.a.create().get(r)).data;if("ok"!==s.stat)throw new Error("Request failed");const l=s.photos.photo;return{page:s.photos.page,pages:s.photos.pages,perPage:s.photos.perpage,total:Number(s.photos.total),photos:l.map(t=>{const e=n(t.farm,t.server,t.id,t.secret);return{id:t.id,thumb:e+"_t.jpg",medium:e+".jpg",large:e+"_b.jpg"}})}}))}function c(t){const e=s(t);return e&&e.id}function d(t){const e=s(t);return e?n(e.farm,e.server,e.id,e.secret)+"_t.jpg":t}},453:function(t,e,o){"use strict";o.d(e,"d",(function(){return s})),o.d(e,"f",(function(){return l})),o.d(e,"a",(function(){return c})),o.d(e,"b",(function(){return d})),o.d(e,"c",(function(){return h})),o.d(e,"e",(function(){return u}));const a="animal-art-references-search";var i=o(452),r=function(t,e,o,a){return new(o||(o=Promise))((function(i,r){function n(t){try{l(a.next(t))}catch(t){r(t)}}function s(t){try{l(a.throw(t))}catch(t){r(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(n,s)}l((a=a.apply(t,e||[])).next())}))};var n=function(t,e,o,a){return new(o||(o=Promise))((function(i,r){function n(t){try{l(a.next(t))}catch(t){r(t)}}function s(t){try{l(a.throw(t))}catch(t){r(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(n,s)}l((a=a.apply(t,e||[])).next())}))};function s(t){return(t=t.toLowerCase()).includes("flickr")?"Flickr":t.includes("unsplash")?"Unsplash":"unknown"}function l(t,e,o,a,s){return n(this,void 0,void 0,(function*(){switch(t){case"Flickr":{const t=yield Object(i.a)(e,o,a,s);return{page:t.page,totalPages:t.pages,photos:t.photos.map(t=>({id:t.id,thumb:t.thumb,regular:t.large}))}}case"Unsplash":{const t=yield function(t,e,o,a){return r(this,void 0,void 0,(function*(){const i=new URLSearchParams({client_id:t,query:e,page:a+"",per_page:o+""}),r=yield fetch("https://api.unsplash.com/search/photos/?"+i.toString());if(!r.ok)throw new Error(r.statusText);const n=yield r.json();return{total:n.total,pages:n.total_pages,photos:n.results}}))}(e,o,a,s);return{page:s,totalPages:t.pages,photos:t.photos.map(t=>({id:t.id,thumb:t.urls.thumb,regular:t.urls.regular}))}}}return{page:0,totalPages:0,photos:[]}}))}function c(t,e,o){return n(this,void 0,void 0,(function*(){switch(t){case"Flickr":return{id:o,author:"",source:""};case"Unsplash":{const t=yield function(t,e){return r(this,void 0,void 0,(function*(){const o=new URLSearchParams({client_id:t}),a=yield fetch("https://api.unsplash.com/photos/"+e+"?"+o.toString());if(!a.ok)throw new Error(a.statusText);const i=yield a.json();return{id:i.id,width:i.width,height:i.height,tags:i.tags.map(t=>t.title),link:i.links.html,urls:i.urls,author:{name:i.user.name,username:i.user.username}}}))}(e,o);return{id:o,author:t.author.name,source:t.author.username}}}return{id:o,author:"",source:""}}))}function d(t,e,o){switch(t){case"Flickr":return"https://www.flickr.com/photo.gne?id="+e;case"Unsplash":return`https://unsplash.com/@${o}?utm_source=${a}&utm_medium=referral`}return o}function h(t){switch(s(t.url)){case"Flickr":return Object(i.b)(t.url);case"Unsplash":return t.id}return""}function u(t){switch(t){case"Flickr":return"https://www.flickr.com/";case"Unsplash":return`https://unsplash.com/?utm_source=${a}&utm_medium=referral`}return null}},456:function(t,e,o){"use strict";o(451)},457:function(t,e,o){(e=o(21)(!1)).push([t.i,".model-viewer[data-v-4ef7cf1b]{position:relative}.model-viewer canvas[data-v-4ef7cf1b]{cursor:grab}\n",""]),t.exports=e},458:function(t,e,o){"use strict";e.a=[{name:"Wolf Skull (for canis)",path:"./static/models/wolf-skull.obj",origin:"https://sketchfab.com/osuecampus"},{name:"Hyena Skull",path:"./static/models/hyena-skull.obj",origin:"https://cults3d.com/en/3d-model/various/parahyaena-brunnea-brown-hyena-skull"},{name:"Lion Skull (for big cats)",path:"./static/models/lion-skull.obj",origin:"https://sketchfab.com/aucklandmuseum"},{name:"Cat Skull (for small cats)",path:"./static/models/cat-skull.obj",origin:"https://sketchfab.com/openededinburgh"},{name:"Bear Skull",path:"./static/models/bear-skull.obj",origin:"https://sketchfab.com/geoffreymarchal"},{name:"Raccoon Skull",path:"./static/models/raccoon-skull.obj",origin:"https://sketchfab.com/3d-models/raccoon-skull-4bec9f17661542269bfe2f66ebe42361"},{name:"Skunk Skull",path:"./static/models/skunk-skull.obj",origin:"https://sketchfab.com/3d-models/skunk-skull-c82f5ecc8b5445828619cc6e8aea7457"},{name:"Wolverine Skull",path:"./static/models/wolverine-skull.obj",origin:"https://sketchfab.com/3d-models/wolverine-skull-98c8a4ac83604d1384990916da2dd440"},{name:"Opossum Skull",path:"./static/models/opossum-skull.obj",origin:"https://www.thingiverse.com/Spfaff1994/designs"},{name:"River Otter Skull",path:"./static/models/river-otter-skull.obj",origin:"https://sketchfab.com/3d-models/river-otter-skull-c17e2cd117714da7a3592c1f13ec64ac"},{name:"Sea Lion Skull",path:"./static/models/sea-lion-skull.obj",origin:"https://sketchfab.com/3d-models/sea-lion-skull-6394af7f20dd42869baf8fc6c77fe11a"},{name:"Leopard Seal Skull",path:"./static/models/leopard-seal-skull.obj",origin:"https://sketchfab.com/3d-models/leopard-seal-skull-0050849b83cc4ae09d28580030dd51be"},{name:"Kangaroo Skull",path:"./static/models/kangaroo-skull.obj",origin:"https://sketchfab.com/3d-models/kangaroowallaby-skull-62a3f3fc37064f8cb0eb839f7d03e70f"},{name:"Horse Skull",path:"./static/models/horse-skull.obj",origin:"https://sketchfab.com/openededinburgh"},{name:"Cow Skull",path:"./static/models/cow-skull.obj",origin:"https://sketchfab.com/bencva"},{name:"Sheep Skull",path:"./static/models/sheep-skull.obj",origin:"https://sketchfab.com/victorzug"},{name:"Mule Deer Skull",path:"./static/models/mule-deer-skull.obj",origin:"https://sketchfab.com/uviclib"},{name:"Elephant Skull",path:"./static/models/elephant-skull.obj",origin:"https://sketchfab.com/3d-models/african-forest-elephant-for-mobile-devices-320fd7ff1d7e450189333dc270cf12ae"},{name:"Rhino Skull",path:"./static/models/rhino-skull.obj",origin:"https://sketchfab.com/3d-models/rhinoceros-skull-dbee4f8f32fd4a96b5a021137dd4e2c6"},{name:"Pig Skull",path:"./static/models/pig-skull.obj",origin:"https://sketchfab.com/geoffreymarchal"},{name:"Capybara Skull",path:"./static/models/capybara-skull.obj",origin:"https://sketchfab.com/3d-models/capybara-skull-of-the-largest-living-rodent-77a788c945864ec39dca84a1f56601e4"},{name:"Rat Skull",path:"./static/models/rat-skull.obj",origin:"https://www.thingiverse.com/scienceminer/about"},{name:"Squirrel Skull",path:"./static/models/squirrel-skull.obj",origin:"https://sketchfab.com/3d-models/imnh-r-80-squirrel-cranium-a624d77bbfaa4c66957c78ce4ffe58d2"},{name:"Rabbit Skull",path:"./static/models/rabbit-skull.obj",origin:"https://sketchfab.com/agancz"},{name:"Bat Skull",path:"./static/models/bat-skull.obj",origin:"https://sketchfab.com/uod_museums"},{name:"Chicken Skull",path:"./static/models/chicken-skull.obj",origin:"https://sketchfab.com/misterdevious"},{name:"Hawk Skull",path:"./static/models/hawk-skull.obj",origin:"https://sketchfab.com/3d-models/red-tailed-hawk-skull-28380a6911ff4aa19ba9e7ace41240f9"},{name:"Crocodile Skull",path:"./static/models/crocodile-skull.obj",origin:"https://cults3d.com/en/users/MadScientist3D/creations"},{name:"Alligator Skull",path:"./static/models/alligator-skull.obj",origin:"https://sketchfab.com/neometrixtech"},{name:"Iguana Skull",path:"./static/models/iguana-skull.obj",origin:"https://sketchfab.com/3d-models/green-iguana-skull-ouvc-10677-1427f887e0fd41eb9c9c97e07c3610e3"},{name:"Turtle Skull",path:"./static/models/turtle-skull.obj",origin:"https://sketchfab.com/3d-models/turtle-skull-7f9ed32646e74368b09193f430423f37"},{name:"Frog Skull",path:"./static/models/frog-skull.obj",origin:"https://sketchfab.com/3d-models/frog-skull-9c491d45c73e49df8cd4277d3dc44ade"},{name:"Python Skull",path:"./static/models/python-skull.obj",origin:"https://www.tinkercad.com/things/aTogRekErps-python-skull-for-dr-close"},{name:"Dolphin Skull",path:"./static/models/dolphin-skull.obj",origin:"https://sketchfab.com/geoffreymarchal"},{name:"False Killer Whale Skull",path:"./static/models/false-killer-whale-skull.obj",origin:"https://sketchfab.com/3d-models/false-killer-whale-skull-bf444b83934243b4be0c8ddaa7b397f4"},{name:"Human Skull",path:"./static/models/human-skull.obj",origin:"https://sketchfab.com/martinjario"}]},459:function(t,e,o){"use strict";o.d(e,"a",(function(){return i})),o.d(e,"b",(function(){return r}));const a=1/180*Math.PI;function i(t,e,o){return function(t,e,o){const a=Math.cos(.5*t),i=Math.sin(.5*t),r=Math.cos(.5*e),n=Math.sin(.5*e),s=Math.cos(.5*o),l=Math.sin(.5*o);return{x:a*r*s+i*n*l,y:a*r*l-i*n*s,z:i*r*l+a*n*s,w:i*r*s-a*n*l}}(o*a,e*a,t*a)}function r(t,e){const o=t.x*e.x+t.y*e.y+t.z*e.z+t.w*e.w;return 1-o*o}},460:function(t,e,o){"use strict";var a=function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("a-spin",{staticClass:"model-viewer",style:{width:t.width+"px",height:t.height+"px"},attrs:{spinning:t.loading}},[o("canvas",{ref:"canvas",attrs:{width:t.width,height:t.height},on:{contextmenu:function(t){t.preventDefault()},mousedown:t.dragStart,mousemove:t.dragMove,mousewheel:t.mouseWheel,"&touchstart":function(e){return t.dragStart(e)},"&touchmove":function(e){return t.dragMove(e)}}}),t._v(" "),t._t("default")],2)};a._withStripped=!0;var i=o(455),r=o(471),n=o(11),s=function(t,e,o,a){return new(o||(o=Promise))((function(i,r){function n(t){try{l(a.next(t))}catch(t){r(t)}}function s(t){try{l(a.throw(t))}catch(t){r(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(n,s)}l((a=a.apply(t,e||[])).next())}))};const l=1/180*Math.PI;class c extends(n.a.extend({props:{width:{type:Number,default:420},height:{type:Number,default:420},preferSize:{type:Number,default:6.5},zoom:{type:Number},rotateX:{type:Number},rotateY:{type:Number},rotateZ:{type:Number},clearColor:{type:Number,default:15921906},modelUrl:String},watch:{modelUrl(){this.loadModel()},rotateX(t){const e=this.model;e&&(e.rotation.x=t*l)},rotateY(t){const e=this.model;e&&(e.rotation.y=t*l)},rotateZ(t){const e=this.model;e&&(e.rotation.z=t*l)},zoom(t){const e=this.camera;e&&(e.position.z=20-t)}},data:()=>({loading:!1,dragging:!1,dragStartX:0,dragStartY:0}),mounted(){(this.renderer=new i.s({canvas:this.$refs.canvas})).setClearColor(this.clearColor);const t=this.scene=new i.q,e=this.camera=new i.n(45,this.width/this.height);e.position.set(0,0,20-this.zoom),e.lookAt(new i.r(0,0,0)),t.add(e);const o=new i.c(16777215);o.position.set(0,5,5),t.add(o);const a=setInterval(this.render,40);window.addEventListener("mouseup",this.dragStop),window.addEventListener("touchend",this.dragStop),this.$on("hook:beforeDestroy",()=>{clearInterval(a),window.removeEventListener("mouseup",this.dragStop),window.removeEventListener("touchend",this.dragStop)}),this.loader=new r.a,this.modelUrl&&this.loadModel()},methods:{loadOBJ(t){const e=this;return new Promise((o,a)=>{if(!e.loader)throw new Error("Not initialized");e.loader.load(t,o,void 0,a)})},loadModel(){return s(this,void 0,void 0,(function*(){try{this.loading=!0;const t=yield this.loadOBJ(this.modelUrl),e=this;e.model&&(e.scene.remove(e.model),e.model=void 0),t.traverse(t=>{if(t instanceof i.l){const e=t.material;e instanceof i.k?e.side=i.d:e.forEach(t=>{t.side=i.d})}});const o=t.children[0],a=new i.r;(new i.a).setFromObject(t).getSize(a);const r=this.preferSize/Math.max(a.x,a.y,a.z);o.scale.set(r,r,r);const n=new i.r;(new i.a).setFromObject(t).getCenter(n),o.position.set(-n.x,-n.y,-n.z),t.rotation.set(this.rotateX*l,this.rotateY*l,this.rotateZ*l),e.model=t,e.scene.add(t)}finally{this.loading=!1}}))},render(){this.renderer.render(this.scene,this.camera)},dragStart(t){this.dragging=!0,this.dragStartX=t.clientX||t.touches&&t.touches[0].clientX,this.dragStartY=t.clientY||t.touches&&t.touches[0].clientY},dragStop(){this.dragging=!1},dragMove(t){if(!this.dragging)return;const e=this.dragStartX,o=this.dragStartY,a=t.clientX||t.touches&&t.touches[0].clientX,i=t.clientY||t.touches&&t.touches[0].clientY,r=a-e,n=i-o;let s=this.rotateX,l=this.rotateY;this.dragStartX=a,this.dragStartY=i,s+=n,s<-180?s+=360:s>180&&(s-=360),l+=r,l<-180?l+=360:l>180&&(l-=360),this.$emit("update:rotateX",0|s),this.$emit("update:rotateY",0|l)},mouseWheel(t){const e=Math.max(-1,Math.min(1,-t.deltaY));this.$emit("update:zoom",Math.min(20,Math.max(0,this.zoom+e)))}}})){}var d=c,h=(o(456),o(104)),u=Object(h.a)(d,a,[],!1,null,"4ef7cf1b",null);u.options.__file="src/components/ModelViewer.vue";e.a=u.exports},461:function(t,e,o){var a=o(477);"string"==typeof a&&(a=[[t.i,a,""]]),a.locals&&(t.exports=a.locals);(0,o(450).default)("c88ea1a6",a,!1,{})},470:function(t,e,o){var a=o(496);"string"==typeof a&&(a=[[t.i,a,""]]),a.locals&&(t.exports=a.locals);(0,o(450).default)("12c11aff",a,!1,{})},472:function(t,e,o){var a=o(498);"string"==typeof a&&(a=[[t.i,a,""]]),a.locals&&(t.exports=a.locals);(0,o(450).default)("613e3fed",a,!1,{})},476:function(t,e,o){"use strict";o(461)},477:function(t,e,o){(e=o(21)(!1)).push([t.i,".thumb[data-v-3e22842a]{display:inline-block}.thumb .thumb-inner-wrapper[data-v-3e22842a]{position:relative;background-color:#f2f2f2;overflow:hidden}.thumb .thumb-inner-wrapper.flip[data-v-3e22842a]{transform:scale(-1, 1);transform-origin:50% 50%}.thumb .thumb-inner-wrapper img[data-v-3e22842a]{position:absolute}\n",""]),t.exports=e},495:function(t,e,o){"use strict";o(470)},496:function(t,e,o){(e=o(21)(!1)).push([t.i,".image-viewer-mask[data-v-5567e6cd]{position:fixed;z-index:1000;left:0;top:0;max-width:0;max-height:0}.image-viewer-mask .image-viewer[data-v-5567e6cd]{position:fixed;z-index:1000;left:0;top:0;right:0;bottom:0;background-color:rgba(0,0,0,0.5);overflow:hidden}.image-viewer-mask .image-viewer img[data-v-5567e6cd]{position:absolute;left:50%;top:50%;transform-origin:50% 50%;box-shadow:0 0 12px rgba(0,0,0,0.5)}.image-viewer-mask .image-viewer .flickr-link[data-v-5567e6cd]{display:block;position:absolute;z-index:1;top:8px;right:48px;color:#fff;line-height:24px}.image-viewer-mask .image-viewer .flickr-link[data-v-5567e6cd]:hover{text-decoration:underline}.image-viewer-mask .image-viewer .btn-close[data-v-5567e6cd]{position:absolute;top:8px;right:8px;z-index:1;cursor:pointer;font-size:16px;color:#fff;width:24px;height:24px;line-height:24px;text-align:center;vertical-align:middle;border-radius:100%;background-color:rgba(0,0,0,0.35)}.image-viewer-mask .image-viewer .author-info[data-v-5567e6cd]{display:flex;align-items:center;justify-content:center;position:absolute;z-index:1;left:0;right:0;bottom:0;height:30px;font-size:16px;color:#fff;font-style:italic}.image-viewer-mask .image-viewer .author-info a[data-v-5567e6cd]{color:#fff;text-decoration:underline}\n",""]),t.exports=e},497:function(t,e,o){"use strict";o(472)},498:function(t,e,o){(e=o(21)(!1)).push([t.i,".wrapper[data-v-1a1d373c]{display:flex;align-items:flex-start;width:100%;height:100%;box-sizing:border-box;padding:10px}.wrapper .column[data-v-1a1d373c]{display:flex;flex-direction:column}.wrapper .column[data-v-1a1d373c]:not(:last-child){margin-right:10px}.wrapper .column .row[data-v-1a1d373c]{display:flex;width:100%;align-items:center}.wrapper .column .row[data-v-1a1d373c]:not(:last-child){margin-bottom:.5em}.wrapper .column .row>*[data-v-1a1d373c]:not(:last-child){min-width:0;margin-right:.5em}.wrapper .column.condition[data-v-1a1d373c]{flex:0 0 360px;width:360px}.wrapper .column.condition .inner-wrapper[data-v-1a1d373c]{display:flex;flex-direction:column;flex:1 1;min-height:0;width:100%}.wrapper .column.condition .collapse-handler[data-v-1a1d373c]{display:none}.wrapper .column.result[data-v-1a1d373c]{flex:1 1;min-width:0;height:100%}.wrapper .column.result .list[data-v-1a1d373c]{width:100%;height:100%;overflow-y:scroll;box-sizing:border-box;border:1px solid #d9d9d9;border-radius:4px;padding:10px}.wrapper .column.result .list .item[data-v-1a1d373c]{margin:5px;cursor:zoom-in}@media screen and (max-width: 480px){.wrapper[data-v-1a1d373c]{display:block !important;overflow:hidden;position:relative;box-sizing:border-box;width:100%;height:100%;padding:0 !important}.wrapper .column.condition[data-v-1a1d373c]{position:fixed;left:0;top:0;z-index:1;width:100%;height:100%;box-sizing:border-box;background-color:#fff;overflow:auto;transition:height .3s}.wrapper .column.condition .inner-wrapper[data-v-1a1d373c]{width:360px;margin:0 auto;padding:10px 0}.wrapper .column.condition .collapse-handler[data-v-1a1d373c]{display:block !important;position:fixed;left:50%;top:100%;width:48px;height:48px;margin:-24px 0 0 -24px;border-radius:100%;overflow:hidden;background-color:rgba(0,0,0,0.2);color:#fff;font-size:20px;text-align:center}.wrapper .column.condition .collapse-handler .icon[data-v-1a1d373c]{width:48px}.wrapper .column.condition.collapsed[data-v-1a1d373c]{height:0 !important}.wrapper .column.condition.collapsed .collapse-handler[data-v-1a1d373c]{top:0 !important}.wrapper .column.condition.collapsed .collapse-handler .icon[data-v-1a1d373c]{transform-origin:50% 50%;transform:rotate(180deg);margin-top:24px}}\n",""]),t.exports=e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,