(this.webpackJsonp=this.webpackJsonp||[]).push([[3],{446:function(t,e,i){"use strict";i.r(e);var s=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"container cols"},[i("div",{staticClass:"rows",staticStyle:{width:"300px"}},[i("a-select",{attrs:{"show-search":"",size:"small"},model:{value:t.model.url,callback:function(e){t.$set(t.model,"url",e)},expression:"model.url"}},t._l(t.models,(function(e){return i("a-select-option",{key:e.path,attrs:{value:e.path}},[t._v("\n                "+t._s(e.name)+"\n            ")])})),1),t._v(" "),i("model-viewer",{attrs:{"model-url":t.model.url,"rotate-x":t.model.rotateX,"rotate-y":t.model.rotateY,"rotate-z":t.model.rotateZ,zoom:t.model.zoom,width:300,height:300},on:{"update:rotateX":function(e){return t.$set(t.model,"rotateX",e)},"update:rotate-x":function(e){return t.$set(t.model,"rotateX",e)},"update:rotateY":function(e){return t.$set(t.model,"rotateY",e)},"update:rotate-y":function(e){return t.$set(t.model,"rotateY",e)},"update:rotateZ":function(e){return t.$set(t.model,"rotateZ",e)},"update:rotate-z":function(e){return t.$set(t.model,"rotateZ",e)},"update:zoom":function(e){return t.$set(t.model,"zoom",e)}}}),t._v(" "),i("div",{staticClass:"cols",staticStyle:{"align-items":"center"}},[i("a-slider",{staticClass:"fill",attrs:{included:!1,min:-180,max:180},model:{value:t.model.rotateZ,callback:function(e){t.$set(t.model,"rotateZ",e)},expression:"model.rotateZ"}}),t._v(" "),i("a-button",{attrs:{size:"small"},on:{click:function(e){t.model.rotateX=t.model.rotateY=t.model.rotateZ=0}}},[t._v("\n                Reset\n            ")])],1),t._v(" "),i("div",[t._v("Direction Distribution")]),t._v(" "),i("a-select",{attrs:{"show-search":"",size:"small"},model:{value:t.dataDistributionFilterTag,callback:function(e){t.dataDistributionFilterTag=e},expression:"dataDistributionFilterTag"}},t._l(t.tags,(function(e,s){return i("a-select-option",{key:s},[t._v(t._s(s)+" ("+t._s(e)+")")])})),1),t._v(" "),i("data-distribution",{attrs:{width:300,height:300,data:t.dataWithTag}})],1),t._v(" "),i("div",{staticClass:"rows",staticStyle:{width:"600px"}},[i("div",{staticClass:"cols"},[i("a-select",{staticStyle:{width:"100px"},attrs:{size:"small"},model:{value:t.photoSource,callback:function(e){t.photoSource=e},expression:"photoSource"}},t._l(t.photoSourceOptions,(function(e){return i("a-select-option",{key:e,attrs:{value:e}},[t._v("\n                    "+t._s(e)+"\n                ")])})),1),t._v(" "),i("a-input",{staticStyle:{width:"120px"},attrs:{placeholder:"API Key",size:"small"},model:{value:t.apiKey,callback:function(e){t.apiKey=e},expression:"apiKey"}},[i("a-icon",{attrs:{slot:"prefix",type:"lock"},slot:"prefix"})],1),t._v(" "),i("a-input-search",{staticClass:"fill",attrs:{placeholder:"Keywords",size:"small",disabled:!t.apiKey,loading:t.searchLoading},on:{search:function(e){return t.search(1)}},model:{value:t.keywords,callback:function(e){t.keywords=e},expression:"keywords"}})],1),t._v(" "),i("div",{staticClass:"cols",staticStyle:{height:"114px"}},[i("a-button",{staticStyle:{height:"100%"},attrs:{icon:"left",size:"small",disabled:t.page.page<=1},on:{click:t.prevPage}}),t._v(" "),i("div",{staticClass:"photos-list fill",staticStyle:{height:"100%"}},t._l(t.page.photos,(function(e){return i("div",{staticClass:"photo",class:{active:e.id===t.clip.id},on:{click:function(i){return t.selectPhoto(e)}}},[i("img",{attrs:{src:e.thumb,alt:""}})])})),0),t._v(" "),i("a-button",{staticStyle:{height:"100%"},attrs:{icon:"right",size:"small",disabled:t.page.page>=t.page.totalPages},on:{click:t.nextPage}})],1),t._v(" "),i("image-clip",{staticStyle:{width:"600px",height:"420px"},attrs:{"image-url":t.clip.imageUrl,"image-width":t.clip.width,"image-height":t.clip.height,"clip-left":t.clip.clipLeft,"clip-top":t.clip.clipTop,"clip-size":t.clip.clipSize},on:{"update:imageWidth":function(e){return t.$set(t.clip,"width",e)},"update:image-width":function(e){return t.$set(t.clip,"width",e)},"update:imageHeight":function(e){return t.$set(t.clip,"height",e)},"update:image-height":function(e){return t.$set(t.clip,"height",e)},"update:clipLeft":function(e){return t.$set(t.clip,"clipLeft",e)},"update:clip-left":function(e){return t.$set(t.clip,"clipLeft",e)},"update:clipTop":function(e){return t.$set(t.clip,"clipTop",e)},"update:clip-top":function(e){return t.$set(t.clip,"clipTop",e)},"update:clipSize":function(e){return t.$set(t.clip,"clipSize",e)},"update:clip-size":function(e){return t.$set(t.clip,"clipSize",e)}}}),t._v(" "),i("div",{staticClass:"form-item cols"},[i("label",[t._v("ID: ")]),t._v(" "),i("a-input",{staticClass:"fill",attrs:{size:"small",placeholder:"ID"},model:{value:t.clip.id,callback:function(e){t.$set(t.clip,"id",e)},expression:"clip.id"}})],1),t._v(" "),i("div",{staticClass:"form-item cols"},[i("label",[t._v("URL: ")]),t._v(" "),i("a-input",{staticClass:"fill",attrs:{size:"small",placeholder:"Image URL"},model:{value:t.clip.imageUrl,callback:function(e){t.$set(t.clip,"imageUrl",e)},expression:"clip.imageUrl"}})],1),t._v(" "),i("div",{staticClass:"form-item cols"},[i("label",[t._v("Author: ")]),t._v(" "),i("a-input",{staticClass:"fill",attrs:{size:"small",placeholder:"Author"},model:{value:t.clip.author,callback:function(e){t.$set(t.clip,"author",e)},expression:"clip.author"}})],1),t._v(" "),i("div",{staticClass:"form-item cols"},[i("label",[t._v("Link: ")]),t._v(" "),i("a-input",{staticClass:"fill",attrs:{size:"small",placeholder:"Author link"},model:{value:t.clip.source,callback:function(e){t.$set(t.clip,"source",e)},expression:"clip.source"}})],1),t._v(" "),i("div",{staticClass:"form-item cols"},[i("label",[t._v("Tags: ")]),t._v(" "),i("a-select",{staticClass:"fill",attrs:{mode:"tags",size:"small",placeholder:"Tags"},model:{value:t.clip.tags,callback:function(e){t.$set(t.clip,"tags",e)},expression:"clip.tags"}})],1),t._v(" "),i("a-button",{attrs:{disabled:!(t.clip.imageUrl&&t.clip.tags&&t.clip.tags.length),type:"primary",size:"small"},on:{click:t.addToList}},[t._v("\n            Save to List\n        ")])],1),t._v(" "),i("div",{staticClass:"rows",staticStyle:{width:"240px"}},[i("div",{staticClass:"cols"},[i("a-auto-complete",{staticClass:"fill",attrs:{"data-source":t.files,placeholder:"Filename",size:"small"},model:{value:t.filename,callback:function(e){t.filename=e},expression:"filename"}}),t._v(" "),i("a-button",{attrs:{icon:"file",title:"New",size:"small"},on:{click:t.createNew}}),t._v(" "),i("a-button",{attrs:{icon:"save",title:"Save .json File",disabled:!t.filename,size:"small"},on:{click:t.saveJson}})],1),t._v(" "),i("thumb-list",{ref:"thumbList",staticClass:"fill",attrs:{images:t.records,active:t.recordIndex},on:{select:t.selectRecord,remove:t.removeRecord}}),t._v(" "),i("div",{staticStyle:{"font-size":"12px","text-align":"right"}},[t._v("\n            Total: "+t._s(t.records.length)+"\n        ")]),t._v(" "),i("a-button",{staticStyle:{width:"100%"},attrs:{disabled:t.check.checking,title:"Remove missing images from current list",size:"small"},on:{click:t.auditCurrentList}},[t.check.checking&&t.check.filename===t.filename?[t._v("\n                "+t._s(t.check.progress)+" / "+t._s(t.check.total)+"\n            ")]:[t._v("\n                Audit Current List\n            ")]],2),t._v(" "),i("a-button",{staticStyle:{width:"100%"},attrs:{disabled:t.check.checking,title:"Remove missing images from all files",size:"small"},on:{click:t.auditAll}},[t.check.checking?[t._v("\n                "+t._s(t.check.filename)+": "+t._s(t.check.progress)+" / "+t._s(t.check.total)+"\n            ")]:[t._v("\n                Audit All Files\n            ")]],2)],1)])};s._withStripped=!0;var a=i(549),o=i(448),l=i(454),r=i.n(l),n=i(11),c=function(){var t=this.$createElement;return(this._self._c||t)("canvas",{ref:"canvas",attrs:{width:this.width,height:this.height}})};c._withStripped=!0;var h=i(459);class d extends(n.a.extend({props:{width:Number,height:Number,data:Array},mounted(){const t=this.$refs.canvas;this.ctx=t.getContext("2d"),this.render()},watch:{data(){this.render()}},methods:{render(){var t;const e=this.ctx;if(!e)return;e.fillStyle="#f2f2f2",e.fillRect(0,0,this.width,this.height);const i=this.width/2,s=this.height/2;e.beginPath(),e.moveTo(0,s),e.lineTo(this.width,s),e.moveTo(i,0),e.lineTo(i,this.height),e.strokeStyle="#999",e.stroke(),e.fillStyle="#000",e.fillText("front",this.width-28,s+3),e.fillText("back",6,s+3),e.fillText("up",i-6,12),e.fillText("down",i-12,this.height-6);const a=this.width/2*.75;null===(t=this.data)||void 0===t||t.forEach(t=>{const o=Object(h.a)(t.rx+180,t.ry+180,t.rz+180);e.beginPath(),e.arc(i+(1-2*Math.abs(o.z))*a,s+o.y*a,1,0,2*Math.PI),e.strokeStyle="#000",e.stroke()})}}})){}var u=d,p=i(104),m=Object(p.a)(u,c,[],!1,null,null,null);m.options.__file="src/components/DataDistribution.vue";var f=m.exports,g=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"image-clip"},[i("div",{staticClass:"side"},[i("div",{staticClass:"small"},[t.imageUrl?i("img",{style:t.smallImageStyle,attrs:{src:t.imageUrl,alt:""}}):t._e()]),t._v(" "),i("div",{staticClass:"slider-wrapper"},[i("span",{staticClass:"prefix"},[t._v("Size")]),t._v(" "),i("a-slider",{staticClass:"slider",attrs:{included:!1,min:0,max:t.imageClipMaxSize},model:{value:t.clipSizeValue,callback:function(e){t.clipSizeValue=e},expression:"clipSizeValue"}})],1)]),t._v(" "),i("div",{ref:"imageClipLarge",staticClass:"main"},[i("div",{staticClass:"large",on:{mousemove:t.imageClipDragMove}},[i("a-spin",{attrs:{spinning:t.loading}},[t.imageUrl?i("div",{staticClass:"image",style:t.imageStyle}):t._e()]),t._v(" "),t.imageUrl?i("div",{staticClass:"image-clip",style:t.imageClipStyle,on:{mousedown:t.imageClipDragStart}}):t._e()],1),t._v(" "),i("div",{staticClass:"slider-wrapper",staticStyle:{width:"100%"}},[i("span",{staticClass:"prefix"},[t._v("Zoom")]),t._v(" "),i("a-slider",{staticClass:"slider",attrs:{included:!1,min:10,max:100},model:{value:t.zoom,callback:function(e){t.zoom=e},expression:"zoom"}})],1)])])};g._withStripped=!0;class v extends(n.a.extend({props:{imageUrl:String,imageWidth:Number,imageHeight:Number,clipLeft:Number,clipTop:Number,clipSize:Number},data:()=>({loading:!1,zoom:1,dragging:!1,dragX:0,dragY:0,clipSizeValue:0}),computed:{imageStyle(){return{background:`url(${this.imageUrl}) 0 0 / 100% 100% no-repeat`,width:this.imageWidth*this.zoom/100+"px",height:this.imageHeight*this.zoom/100+"px"}},imageClipStyle(){return{left:this.clipLeft*this.zoom/100+"px",top:this.clipTop*this.zoom/100+"px",width:this.clipSize*this.zoom/100+"px",height:this.clipSize*this.zoom/100+"px"}},imageClipMaxSize(){return Math.min(this.imageWidth,this.imageHeight)},smallImageStyle(){const t=1/this.clipSize*160;return{position:"absolute",width:this.imageWidth*t+"px",height:this.imageHeight*t+"px",left:-this.clipLeft*t+"px",top:-this.clipTop*t+"px"}}},watch:{imageUrl:{immediate:!0,handler(t){if(!t)return;this.loading=!0;const e=new Image;e.onload=()=>{this.loading=!1;const t=this.$refs.imageClipLarge;this.zoom=Math.min(e.width,e.height,t.clientWidth-18,t.clientHeight-18-32)/e.width*100|0;const i=e.width,s=e.height,a=Math.min(i,s,this.clipSizeValue<1?i:this.clipSizeValue);this.$emit("update:imageWidth",i),this.$emit("update:imageHeight",s),this.$emit("update:clipSize",a)},e.onerror=e.onabort=()=>{this.loading=!1},e.src=t}},clipSize:{immediate:!0,handler(t){this.clipSizeValue=t,this.$emit("update:clipLeft",Math.min(this.clipLeft,this.imageWidth-t)),this.$emit("update:clipTop",Math.min(this.clipTop,this.imageHeight-t))}},clipSizeValue(t){this.$emit("update:clipSize",t)}},mounted(){window.addEventListener("mouseup",this.imageClipDragStop),this.$once("hook:beforeDestroy",()=>{window.removeEventListener("mouseup",this.imageClipDragStop)})},methods:{imageClipDragStart(t){0===t.button&&(this.dragging=!0,this.dragX=t.clientX,this.dragY=t.clientY)},imageClipDragStop(){this.dragging=!1},imageClipDragMove(t){const e=this.dragX,i=this.dragY,s=t.clientX,a=t.clientY;if(this.dragX=s,this.dragY=a,!this.dragging)return;const o=s-e,l=a-i;let r=this.clipLeft,n=this.clipTop;r+=o/(this.zoom/100),r=Math.max(0,Math.min(this.imageWidth-this.clipSize,r)),n+=l/(this.zoom/100),n=Math.max(0,Math.min(this.imageHeight-this.clipSize,n)),this.$emit("update:clipLeft",r),this.$emit("update:clipTop",n)}}})){}var b=v,k=(i(499),Object(p.a)(b,g,[],!1,null,"5c5ef5cb",null));k.options.__file="src/components/ImageClip.vue";var x=k.exports,w=i(460),y=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{ref:"scroll",staticClass:"thumb-list",on:{scroll:t.updateVisibleIndex}},[i("div",{staticClass:"list"},t._l(t.thumbUrls,(function(e,s){return i("div",{staticClass:"thumb",class:{active:t.active===s},on:{click:function(e){return t.select(s)}}},[i("div",{staticClass:"label"},[t._v("#"+t._s(s+1))]),t._v(" "),s>=t.firstVisibleIndex&&s<=t.lastVisibleIndex?i("img",{attrs:{src:e,alt:""}}):t._e(),t._v(" "),i("a-button",{staticClass:"btn-remove",attrs:{icon:"delete",shape:"circle",size:"small"},on:{click:function(e){return e.stopPropagation(),t.remove(s)}}})],1)})),0)])};y._withStripped=!0;var S=i(452);function _(t,e){let i=null,s=void 0;return function a(){null!=s&&clearTimeout(s);const o=Date.now();null!=i&&o-i>=e?(t.apply(this,arguments),i=null):(s=setTimeout(a.bind(this,arguments),e),i=o)}}class z extends(n.a.extend({props:{images:Array,active:Number},data:()=>({firstVisibleIndex:-1,lastVisibleIndex:-1}),computed:{thumbUrls(){return(this.images||[]).map(t=>Object(S.c)(t.url))}},mounted(){this.updateVisibleIndex()},watch:{active(t){this.$nextTick(()=>{if(t>=0&&(t<=this.firstVisibleIndex||t>=this.lastVisibleIndex)){const e=this.$refs.scroll;e&&(e.scrollTop=124*t)}})}},methods:{updateVisibleIndex:_((function(){if(!this.$refs)return;const t=this.$refs.scroll;t&&(this.firstVisibleIndex=Math.floor(t.scrollTop/124),this.lastVisibleIndex=this.firstVisibleIndex+Math.ceil(t.clientHeight/124))}),50),select(t){this.$emit("select",t)},remove(t){this.$emit("remove",t)}}})){}var C=z,j=(i(501),Object(p.a)(C,y,[],!1,null,"2dd20994",null));j.options.__file="src/components/ThumbList.vue";var $=j.exports,L=i(503),T=i(458);var M=i(453),I=function(t,e,i,s){return new(i||(i=Promise))((function(a,o){function l(t){try{n(s.next(t))}catch(t){o(t)}}function r(t){try{n(s.throw(t))}catch(t){o(t)}}function n(t){var e;t.done?a(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(l,r)}n((s=s.apply(t,e||[])).next())}))};const U=r.a.create({baseURL:"/server"});function P(){return I(this,void 0,void 0,(function*(){return(yield U.get("/dataList")).data.map(t=>t.slice(0,t.lastIndexOf(".json")))}))}function Y(t){return I(this,void 0,void 0,(function*(){return(yield U.get("/data",{params:{name:t}})).data}))}function D(t,e){return I(this,void 0,void 0,(function*(){yield U.post("/data",JSON.stringify(e),{params:{name:t},headers:{"Content-Type":"text/plain"}})}))}class X extends(n.a.extend({components:{ModelViewer:w.a,DataDistribution:f,ImageClip:x,ThumbList:$},data:()=>({models:T.a,model:{url:T.a[0].path,rotateX:0,rotateY:0,rotateZ:0,zoom:10},photoSourceOptions:["Flickr","Unsplash"],photoSource:"Unsplash",apiKey:"",keywords:"",searchLoading:!1,page:{page:1,totalPages:0,photos:[]},clip:{imageUrl:"",tags:[],width:0,height:0,clipLeft:0,clipTop:0,clipSize:0,author:"",source:"",id:""},filename:"",files:[],records:[],recordIndex:-1,check:{checking:!1,progress:0,total:0,filename:""},dataDistributionFilterTag:""}),watch:{photoSource:{handler(t){switch(t){case"Flickr":this.apiKey=localStorage.getItem("flicker-api-key")||"";break;case"Unsplash":this.apiKey=localStorage.getItem("unsplash-access-key")||"";break;default:this.apiKey=""}},immediate:!0},apiKey(t){switch(this.photoSource){case"Flickr":localStorage.setItem("flicker-api-key",t);break;case"Unsplash":localStorage.setItem("unsplash-access-key",t)}},filename(t){return I(this,void 0,void 0,(function*(){this.files.includes(t)&&(this.records=yield Y(t+".json"),this.recordIndex=-1,this.clip.tags=[])}))}},computed:{tags(){const t={};return L.default.forEach(e=>e.tags.forEach(e=>{t[e]=(t[e]||0)+1})),t},dataWithTag(){return L.default.filter(t=>t.tags.includes(this.dataDistributionFilterTag))}},mounted(){return I(this,void 0,void 0,(function*(){this.files=yield P()}))},methods:{search(t){return I(this,void 0,void 0,(function*(){if(this.keywords)try{this.searchLoading=!0,this.page.photos=[],this.page=yield Object(M.f)(this.photoSource,this.apiKey,this.keywords,20,t||1)}finally{this.searchLoading=!1}}))},prevPage(){return I(this,void 0,void 0,(function*(){const t=Math.max(1,this.page.page-1);t!==this.page.page&&(yield this.search(t))}))},nextPage(){return I(this,void 0,void 0,(function*(){const t=Math.min(this.page.totalPages,this.page.page+1);t!==this.page.page&&(yield this.search(t))}))},selectPhoto(t){return I(this,void 0,void 0,(function*(){const e=t.id?this.records.findIndex(e=>Object(M.c)(e)===t.id):-1;if(e>=0)this.selectRecord(e);else{this.clip.id=t.id,this.clip.imageUrl=t.regular;const e=yield Object(M.a)(this.photoSource,this.apiKey,t.id);this.clip.author=e.author,this.clip.source=e.source}}))},addToList(){const t=this.clip.id;let e=t&&this.records.find(e=>Object(M.c)(e)===t)||null;e||(e={rx:0,ry:0,rz:0,url:"",cx:0,cy:0,cs:0,w:0,h:0,tags:[]},this.records.push(e)),e.url=this.clip.imageUrl,e.tags=[...this.clip.tags],e.w=this.clip.width,e.h=this.clip.height,e.cx=this.clip.clipLeft,e.cy=this.clip.clipTop,e.cs=this.clip.clipSize,e.rx=this.model.rotateX,e.ry=this.model.rotateY,e.rz=this.model.rotateZ,e.au=this.clip.author,e.src=this.clip.source,e.id=this.clip.id,this.recordIndex=this.records.indexOf(e)},selectRecord(t){this.recordIndex=t;const e=this.records[t];e&&(this.clip.imageUrl=e.url,this.clip.tags=[...e.tags],this.clip.width=e.w,this.clip.height=e.h,this.clip.clipLeft=e.cx,this.clip.clipTop=e.cy,this.clip.clipSize=e.cs,this.model.rotateX=e.rx,this.model.rotateY=e.ry,this.model.rotateZ=e.rz,this.clip.author=e.au||"",this.clip.source=e.src||"",this.clip.id=e.id||"")},removeRecord(t){a.a.confirm({title:"Are you sure you want to delete?",onOk:()=>{this.records.splice(t,1),this.recordIndex===t&&(this.recordIndex=-1)}})},createNew(){this.records.length&&a.a.confirm({title:"Are you sure you want to create a new list?",onOk:()=>{this.recordIndex=-1,this.records=[],this.clip.tags=[],this.clip.id="",this.files.includes(this.filename)&&(this.filename="")}})},saveJson(){return I(this,void 0,void 0,(function*(){yield D(this.filename+".json",this.records),o.a.success("Saved.")}))},auditCurrentList(){return I(this,void 0,void 0,(function*(){this.records=yield this.auditPictures(this.records,this.filename)}))},auditAll(){return I(this,void 0,void 0,(function*(){const t=yield P();for(const e of t){const t=yield Y(e+".json"),i=yield this.auditPictures(t,e);t.length!==i.length&&(yield D(e+".json",i))}}))},auditPictures(t,e){return I(this,void 0,void 0,(function*(){const i=[];if(this.check.filename=e,this.check.progress=0,this.check.total=t.length,this.check.total<1)return t;this.check.checking=!0;const s=t.map(t=>I(this,void 0,void 0,(function*(){var e;(yield(e=t.url,new Promise((function(t,i){const s=new Image;s.onload=function(){t(!0)},s.onerror=s.onabort=function(){t(!1)},s.src=e}))))||i.push(t),this.check.progress+=1,this.check.progress===this.check.total&&(this.check.checking=!1)})));return yield Promise.all(s),o.a.success(`${e}: ${i.length} removed.`),t.filter(t=>!i.includes(t))}))}}})){}var O=X,E=(i(547),Object(p.a)(O,s,[],!1,null,"7ef494b2",null));E.options.__file="src/views/Editor.vue";e.default=E.exports},451:function(t,e,i){var s=i(457);"string"==typeof s&&(s=[[t.i,s,""]]),s.locals&&(t.exports=s.locals);(0,i(450).default)("635b7542",s,!1,{})},452:function(t,e,i){"use strict";i.d(e,"a",(function(){return n})),i.d(e,"b",(function(){return c})),i.d(e,"c",(function(){return h}));var s=i(454),a=i.n(s),o=function(t,e,i,s){return new(i||(i=Promise))((function(a,o){function l(t){try{n(s.next(t))}catch(t){o(t)}}function r(t){try{n(s.throw(t))}catch(t){o(t)}}function n(t){var e;t.done?a(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(l,r)}n((s=s.apply(t,e||[])).next())}))};function l(t,e,i,s){return`https://farm${t}.static.flickr.com/${e}/${i}_${s}`}function r(t){const e=t.match(/farm([0-9]+)\.static\.flickr\.com\/([0-9]+)\/([0-9]+)_([0-9a-z]+)/);return e?{farm:Number(e[1]),server:e[2],id:e[3],secret:e[4]}:null}function n(t,e,i,s){return o(this,void 0,void 0,(function*(){const o="https://api.flickr.com/services/rest/?"+new URLSearchParams({method:"flickr.photos.search",api_key:t,format:"json",nojsoncallback:"1",license:"2,3,4,5,6,9",privacy_filter:"1",content_type:"1",text:e,sort:"relevance",per_page:Math.max(1,Math.min(500,i))+"",page:s+""}).toString(),r=(yield a.a.create().get(o)).data;if("ok"!==r.stat)throw new Error("Request failed");const n=r.photos.photo;return{page:r.photos.page,pages:r.photos.pages,perPage:r.photos.perpage,total:Number(r.photos.total),photos:n.map(t=>{const e=l(t.farm,t.server,t.id,t.secret);return{id:t.id,thumb:e+"_t.jpg",medium:e+".jpg",large:e+"_b.jpg"}})}}))}function c(t){const e=r(t);return e&&e.id}function h(t){const e=r(t);return e?l(e.farm,e.server,e.id,e.secret)+"_t.jpg":t}},453:function(t,e,i){"use strict";i.d(e,"d",(function(){return r})),i.d(e,"f",(function(){return n})),i.d(e,"a",(function(){return c})),i.d(e,"b",(function(){return h})),i.d(e,"c",(function(){return d})),i.d(e,"e",(function(){return u}));const s="animal-art-references-search";var a=i(452),o=function(t,e,i,s){return new(i||(i=Promise))((function(a,o){function l(t){try{n(s.next(t))}catch(t){o(t)}}function r(t){try{n(s.throw(t))}catch(t){o(t)}}function n(t){var e;t.done?a(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(l,r)}n((s=s.apply(t,e||[])).next())}))};var l=function(t,e,i,s){return new(i||(i=Promise))((function(a,o){function l(t){try{n(s.next(t))}catch(t){o(t)}}function r(t){try{n(s.throw(t))}catch(t){o(t)}}function n(t){var e;t.done?a(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(l,r)}n((s=s.apply(t,e||[])).next())}))};function r(t){return(t=t.toLowerCase()).includes("flickr")?"Flickr":t.includes("unsplash")?"Unsplash":"unknown"}function n(t,e,i,s,r){return l(this,void 0,void 0,(function*(){switch(t){case"Flickr":{const t=yield Object(a.a)(e,i,s,r);return{page:t.page,totalPages:t.pages,photos:t.photos.map(t=>({id:t.id,thumb:t.thumb,regular:t.large}))}}case"Unsplash":{const t=yield function(t,e,i,s){return o(this,void 0,void 0,(function*(){const a=new URLSearchParams({client_id:t,query:e,page:s+"",per_page:i+""}),o=yield fetch("https://api.unsplash.com/search/photos/?"+a.toString());if(!o.ok)throw new Error(o.statusText);const l=yield o.json();return{total:l.total,pages:l.total_pages,photos:l.results}}))}(e,i,s,r);return{page:r,totalPages:t.pages,photos:t.photos.map(t=>({id:t.id,thumb:t.urls.thumb,regular:t.urls.regular}))}}}return{page:0,totalPages:0,photos:[]}}))}function c(t,e,i){return l(this,void 0,void 0,(function*(){switch(t){case"Flickr":return{id:i,author:"",source:""};case"Unsplash":{const t=yield function(t,e){return o(this,void 0,void 0,(function*(){const i=new URLSearchParams({client_id:t}),s=yield fetch("https://api.unsplash.com/photos/"+e+"?"+i.toString());if(!s.ok)throw new Error(s.statusText);const a=yield s.json();return{id:a.id,width:a.width,height:a.height,tags:a.tags.map(t=>t.title),link:a.links.html,urls:a.urls,author:{name:a.user.name,username:a.user.username}}}))}(e,i);return{id:i,author:t.author.name,source:t.author.username}}}return{id:i,author:"",source:""}}))}function h(t,e,i){switch(t){case"Flickr":return"https://www.flickr.com/photo.gne?id="+e;case"Unsplash":return`https://unsplash.com/@${i}?utm_source=${s}&utm_medium=referral`}return i}function d(t){switch(r(t.url)){case"Flickr":return Object(a.b)(t.url);case"Unsplash":return t.id}return""}function u(t){switch(t){case"Flickr":return"https://www.flickr.com/";case"Unsplash":return`https://unsplash.com/?utm_source=${s}&utm_medium=referral`}return null}},456:function(t,e,i){"use strict";i(451)},457:function(t,e,i){(e=i(21)(!1)).push([t.i,".model-viewer[data-v-4ef7cf1b]{position:relative}.model-viewer canvas[data-v-4ef7cf1b]{cursor:grab}\n",""]),t.exports=e},458:function(t,e,i){"use strict";e.a=[{name:"Wolf Skull (for canis)",path:"./static/models/wolf-skull.obj",origin:"https://sketchfab.com/osuecampus"},{name:"Hyena Skull",path:"./static/models/hyena-skull.obj",origin:"https://cults3d.com/en/3d-model/various/parahyaena-brunnea-brown-hyena-skull"},{name:"Lion Skull (for big cats)",path:"./static/models/lion-skull.obj",origin:"https://sketchfab.com/aucklandmuseum"},{name:"Cat Skull (for small cats)",path:"./static/models/cat-skull.obj",origin:"https://sketchfab.com/openededinburgh"},{name:"Bear Skull",path:"./static/models/bear-skull.obj",origin:"https://sketchfab.com/geoffreymarchal"},{name:"Raccoon Skull",path:"./static/models/raccoon-skull.obj",origin:"https://sketchfab.com/3d-models/raccoon-skull-4bec9f17661542269bfe2f66ebe42361"},{name:"Skunk Skull",path:"./static/models/skunk-skull.obj",origin:"https://sketchfab.com/3d-models/skunk-skull-c82f5ecc8b5445828619cc6e8aea7457"},{name:"Wolverine Skull",path:"./static/models/wolverine-skull.obj",origin:"https://sketchfab.com/3d-models/wolverine-skull-98c8a4ac83604d1384990916da2dd440"},{name:"Opossum Skull",path:"./static/models/opossum-skull.obj",origin:"https://www.thingiverse.com/Spfaff1994/designs"},{name:"River Otter Skull",path:"./static/models/river-otter-skull.obj",origin:"https://sketchfab.com/3d-models/river-otter-skull-c17e2cd117714da7a3592c1f13ec64ac"},{name:"Sea Lion Skull",path:"./static/models/sea-lion-skull.obj",origin:"https://sketchfab.com/3d-models/sea-lion-skull-6394af7f20dd42869baf8fc6c77fe11a"},{name:"Leopard Seal Skull",path:"./static/models/leopard-seal-skull.obj",origin:"https://sketchfab.com/3d-models/leopard-seal-skull-0050849b83cc4ae09d28580030dd51be"},{name:"Kangaroo Skull",path:"./static/models/kangaroo-skull.obj",origin:"https://sketchfab.com/3d-models/kangaroowallaby-skull-62a3f3fc37064f8cb0eb839f7d03e70f"},{name:"Horse Skull",path:"./static/models/horse-skull.obj",origin:"https://sketchfab.com/openededinburgh"},{name:"Cow Skull",path:"./static/models/cow-skull.obj",origin:"https://sketchfab.com/bencva"},{name:"Sheep Skull",path:"./static/models/sheep-skull.obj",origin:"https://sketchfab.com/victorzug"},{name:"Mule Deer Skull",path:"./static/models/mule-deer-skull.obj",origin:"https://sketchfab.com/uviclib"},{name:"Elephant Skull",path:"./static/models/elephant-skull.obj",origin:"https://sketchfab.com/3d-models/african-forest-elephant-for-mobile-devices-320fd7ff1d7e450189333dc270cf12ae"},{name:"Rhino Skull",path:"./static/models/rhino-skull.obj",origin:"https://sketchfab.com/3d-models/rhinoceros-skull-dbee4f8f32fd4a96b5a021137dd4e2c6"},{name:"Pig Skull",path:"./static/models/pig-skull.obj",origin:"https://sketchfab.com/geoffreymarchal"},{name:"Capybara Skull",path:"./static/models/capybara-skull.obj",origin:"https://sketchfab.com/3d-models/capybara-skull-of-the-largest-living-rodent-77a788c945864ec39dca84a1f56601e4"},{name:"Rat Skull",path:"./static/models/rat-skull.obj",origin:"https://www.thingiverse.com/scienceminer/about"},{name:"Squirrel Skull",path:"./static/models/squirrel-skull.obj",origin:"https://sketchfab.com/3d-models/imnh-r-80-squirrel-cranium-a624d77bbfaa4c66957c78ce4ffe58d2"},{name:"Rabbit Skull",path:"./static/models/rabbit-skull.obj",origin:"https://sketchfab.com/agancz"},{name:"Bat Skull",path:"./static/models/bat-skull.obj",origin:"https://sketchfab.com/uod_museums"},{name:"Chicken Skull",path:"./static/models/chicken-skull.obj",origin:"https://sketchfab.com/misterdevious"},{name:"Hawk Skull",path:"./static/models/hawk-skull.obj",origin:"https://sketchfab.com/3d-models/red-tailed-hawk-skull-28380a6911ff4aa19ba9e7ace41240f9"},{name:"Crocodile Skull",path:"./static/models/crocodile-skull.obj",origin:"https://cults3d.com/en/users/MadScientist3D/creations"},{name:"Alligator Skull",path:"./static/models/alligator-skull.obj",origin:"https://sketchfab.com/neometrixtech"},{name:"Iguana Skull",path:"./static/models/iguana-skull.obj",origin:"https://sketchfab.com/3d-models/green-iguana-skull-ouvc-10677-1427f887e0fd41eb9c9c97e07c3610e3"},{name:"Turtle Skull",path:"./static/models/turtle-skull.obj",origin:"https://sketchfab.com/3d-models/turtle-skull-7f9ed32646e74368b09193f430423f37"},{name:"Frog Skull",path:"./static/models/frog-skull.obj",origin:"https://sketchfab.com/3d-models/frog-skull-9c491d45c73e49df8cd4277d3dc44ade"},{name:"Python Skull",path:"./static/models/python-skull.obj",origin:"https://www.tinkercad.com/things/aTogRekErps-python-skull-for-dr-close"},{name:"Dolphin Skull",path:"./static/models/dolphin-skull.obj",origin:"https://sketchfab.com/geoffreymarchal"},{name:"False Killer Whale Skull",path:"./static/models/false-killer-whale-skull.obj",origin:"https://sketchfab.com/3d-models/false-killer-whale-skull-bf444b83934243b4be0c8ddaa7b397f4"},{name:"Human Skull",path:"./static/models/human-skull.obj",origin:"https://sketchfab.com/martinjario"}]},459:function(t,e,i){"use strict";i.d(e,"a",(function(){return a})),i.d(e,"b",(function(){return o}));const s=1/180*Math.PI;function a(t,e,i){return function(t,e,i){const s=Math.cos(.5*t),a=Math.sin(.5*t),o=Math.cos(.5*e),l=Math.sin(.5*e),r=Math.cos(.5*i),n=Math.sin(.5*i);return{x:s*o*r+a*l*n,y:s*o*n-a*l*r,z:a*o*n+s*l*r,w:a*o*r-s*l*n}}(i*s,e*s,t*s)}function o(t,e){const i=t.x*e.x+t.y*e.y+t.z*e.z+t.w*e.w;return 1-i*i}},460:function(t,e,i){"use strict";var s=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("a-spin",{staticClass:"model-viewer",style:{width:t.width+"px",height:t.height+"px"},attrs:{spinning:t.loading}},[i("canvas",{ref:"canvas",attrs:{width:t.width,height:t.height},on:{contextmenu:function(t){t.preventDefault()},mousedown:t.dragStart,mousemove:t.dragMove,mousewheel:t.mouseWheel,"&touchstart":function(e){return t.dragStart(e)},"&touchmove":function(e){return t.dragMove(e)}}}),t._v(" "),t._t("default")],2)};s._withStripped=!0;var a=i(455),o=i(471),l=i(11),r=function(t,e,i,s){return new(i||(i=Promise))((function(a,o){function l(t){try{n(s.next(t))}catch(t){o(t)}}function r(t){try{n(s.throw(t))}catch(t){o(t)}}function n(t){var e;t.done?a(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(l,r)}n((s=s.apply(t,e||[])).next())}))};const n=1/180*Math.PI;class c extends(l.a.extend({props:{width:{type:Number,default:420},height:{type:Number,default:420},preferSize:{type:Number,default:6.5},zoom:{type:Number},rotateX:{type:Number},rotateY:{type:Number},rotateZ:{type:Number},clearColor:{type:Number,default:15921906},modelUrl:String},watch:{modelUrl(){this.loadModel()},rotateX(t){const e=this.model;e&&(e.rotation.x=t*n)},rotateY(t){const e=this.model;e&&(e.rotation.y=t*n)},rotateZ(t){const e=this.model;e&&(e.rotation.z=t*n)},zoom(t){const e=this.camera;e&&(e.position.z=20-t)}},data:()=>({loading:!1,dragging:!1,dragStartX:0,dragStartY:0}),mounted(){(this.renderer=new a.s({canvas:this.$refs.canvas})).setClearColor(this.clearColor);const t=this.scene=new a.q,e=this.camera=new a.n(45,this.width/this.height);e.position.set(0,0,20-this.zoom),e.lookAt(new a.r(0,0,0)),t.add(e);const i=new a.c(16777215);i.position.set(0,5,5),t.add(i);const s=setInterval(this.render,40);window.addEventListener("mouseup",this.dragStop),window.addEventListener("touchend",this.dragStop),this.$on("hook:beforeDestroy",()=>{clearInterval(s),window.removeEventListener("mouseup",this.dragStop),window.removeEventListener("touchend",this.dragStop)}),this.loader=new o.a,this.modelUrl&&this.loadModel()},methods:{loadOBJ(t){const e=this;return new Promise((i,s)=>{if(!e.loader)throw new Error("Not initialized");e.loader.load(t,i,void 0,s)})},loadModel(){return r(this,void 0,void 0,(function*(){try{this.loading=!0;const t=yield this.loadOBJ(this.modelUrl),e=this;e.model&&(e.scene.remove(e.model),e.model=void 0),t.traverse(t=>{if(t instanceof a.l){const e=t.material;e instanceof a.k?e.side=a.d:e.forEach(t=>{t.side=a.d})}});const i=t.children[0],s=new a.r;(new a.a).setFromObject(t).getSize(s);const o=this.preferSize/Math.max(s.x,s.y,s.z);i.scale.set(o,o,o);const l=new a.r;(new a.a).setFromObject(t).getCenter(l),i.position.set(-l.x,-l.y,-l.z),t.rotation.set(this.rotateX*n,this.rotateY*n,this.rotateZ*n),e.model=t,e.scene.add(t)}finally{this.loading=!1}}))},render(){this.renderer.render(this.scene,this.camera)},dragStart(t){this.dragging=!0,this.dragStartX=t.clientX||t.touches&&t.touches[0].clientX,this.dragStartY=t.clientY||t.touches&&t.touches[0].clientY},dragStop(){this.dragging=!1},dragMove(t){if(!this.dragging)return;const e=this.dragStartX,i=this.dragStartY,s=t.clientX||t.touches&&t.touches[0].clientX,a=t.clientY||t.touches&&t.touches[0].clientY,o=s-e,l=a-i;let r=this.rotateX,n=this.rotateY;this.dragStartX=s,this.dragStartY=a,r+=l,r<-180?r+=360:r>180&&(r-=360),n+=o,n<-180?n+=360:n>180&&(n-=360),this.$emit("update:rotateX",0|r),this.$emit("update:rotateY",0|n)},mouseWheel(t){const e=Math.max(-1,Math.min(1,-t.deltaY));this.$emit("update:zoom",Math.min(20,Math.max(0,this.zoom+e)))}}})){}var h=c,d=(i(456),i(104)),u=Object(d.a)(h,s,[],!1,null,"4ef7cf1b",null);u.options.__file="src/components/ModelViewer.vue";e.a=u.exports},473:function(t,e,i){var s=i(500);"string"==typeof s&&(s=[[t.i,s,""]]),s.locals&&(t.exports=s.locals);(0,i(450).default)("1d391c50",s,!1,{})},474:function(t,e,i){var s=i(502);"string"==typeof s&&(s=[[t.i,s,""]]),s.locals&&(t.exports=s.locals);(0,i(450).default)("ee6a3560",s,!1,{})},475:function(t,e,i){var s=i(548);"string"==typeof s&&(s=[[t.i,s,""]]),s.locals&&(t.exports=s.locals);(0,i(450).default)("b29f8f06",s,!1,{})},499:function(t,e,i){"use strict";i(473)},500:function(t,e,i){(e=i(21)(!1)).push([t.i,".image-clip[data-v-5c5ef5cb]{display:flex;align-items:flex-start}.image-clip .slider-wrapper[data-v-5c5ef5cb]{display:flex;line-height:36px;align-items:center}.image-clip .slider-wrapper .prefix[data-v-5c5ef5cb],.image-clip .slider-wrapper .postfix[data-v-5c5ef5cb]{display:inline-block;vertical-align:middle;min-width:2.5em;text-align:center;font-size:12px}.image-clip .slider-wrapper .prefix[data-v-5c5ef5cb]{margin-right:.5em}.image-clip .slider-wrapper .slider[data-v-5c5ef5cb]{flex:1;vertical-align:middle}.image-clip .side[data-v-5c5ef5cb]{flex:0 0 160px}.image-clip .side .small[data-v-5c5ef5cb]{position:relative;width:160px;height:160px;background-color:#f2f2f2;overflow:hidden}.image-clip .main[data-v-5c5ef5cb]{flex:1 1;display:flex;align-items:flex-start;flex-direction:column;height:100%;margin-left:10px;min-width:0}.image-clip .main .large[data-v-5c5ef5cb]{flex:1 0;position:relative;width:100%;height:100%;background-color:#f2f2f2;overflow:auto}.image-clip .main .large .image-clip[data-v-5c5ef5cb]{position:absolute;z-index:1;box-sizing:border-box;border:solid 1px #409EFF;background-color:rgba(64,158,255,0.25);cursor:move}.image-clip .main[data-v-5c5ef5cb] .ant-spin-nested-loading{width:100%;height:100%}\n",""]),t.exports=e},501:function(t,e,i){"use strict";i(474)},502:function(t,e,i){(e=i(21)(!1)).push([t.i,".thumb-list[data-v-2dd20994]{width:100%;box-sizing:border-box;padding-right:8px;overflow-y:scroll}.thumb-list .list[data-v-2dd20994]{width:100%;margin:0 auto}.thumb-list .list .thumb[data-v-2dd20994]{display:flex;align-items:center;justify-content:center;position:relative;width:100%;height:116px;box-sizing:border-box;margin-bottom:8px;background:#f2f2f2;cursor:pointer;transition:background-color .3s}.thumb-list .list .thumb.active[data-v-2dd20994]{background-color:#69b7ff}.thumb-list .list .thumb img[data-v-2dd20994]{max-width:100px;max-height:100px}.thumb-list .list .thumb .label[data-v-2dd20994]{position:absolute;z-index:2;left:4px;top:4px;pointer-events:none;user-select:none}.thumb-list .list .thumb .btn-remove[data-v-2dd20994]{position:absolute;z-index:2;top:4px;right:4px;border-color:transparent;opacity:0;transition:all .3s}.thumb-list .list .thumb:hover .btn-remove[data-v-2dd20994]{opacity:1}\n",""]),t.exports=e},547:function(t,e,i){"use strict";i(475)},548:function(t,e,i){(e=i(21)(!1)).push([t.i,".container[data-v-7ef494b2]{width:100%;height:100%;box-sizing:border-box;padding:4px}.rows[data-v-7ef494b2]{display:flex;flex-direction:column}.rows>*[data-v-7ef494b2]:not(:last-child){margin-bottom:4px}.rows>.fill[data-v-7ef494b2]{flex:1 1;min-height:0}.cols[data-v-7ef494b2]{display:flex}.cols>*[data-v-7ef494b2]:not(:last-child){margin-right:4px}.cols>.fill[data-v-7ef494b2]{flex:1 1;min-width:0}.photos-list[data-v-7ef494b2]{box-sizing:border-box;border:1px solid #d9d9d9;border-radius:4px;padding:4px;overflow:auto}.photos-list .photo[data-v-7ef494b2]{display:flex;align-items:center;width:50px;height:50px;background:#f2f2f2;float:left;margin:0 2px 2px 0;cursor:pointer;user-select:none}.photos-list .photo.active[data-v-7ef494b2]{background:#1890ff}.photos-list .photo img[data-v-7ef494b2]{max-width:100%;max-height:100%;margin:auto}.form-item[data-v-7ef494b2]{align-items:center;font-size:12px}.form-item label[data-v-7ef494b2]{min-width:3.5em;text-align:right}.thumb-list[data-v-7ef494b2]{border:1px solid #d9d9d9;border-radius:4px}\n",""]),t.exports=e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,