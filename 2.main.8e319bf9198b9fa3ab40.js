(this.webpackJsonp=this.webpackJsonp||[]).push([[2],{321:function(t,e,o){"use strict";o.d(e,"d",(function(){return i})),o.d(e,"f",(function(){return l})),o.d(e,"a",(function(){return c})),o.d(e,"b",(function(){return u})),o.d(e,"c",(function(){return h})),o.d(e,"e",(function(){return d}));const a="animal-art-references-search";var s=o(323),n=function(t,e,o,a){return new(o||(o=Promise))((function(s,n){function r(t){try{l(a.next(t))}catch(t){n(t)}}function i(t){try{l(a.throw(t))}catch(t){n(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(r,i)}l((a=a.apply(t,e||[])).next())}))};var r=function(t,e,o,a){return new(o||(o=Promise))((function(s,n){function r(t){try{l(a.next(t))}catch(t){n(t)}}function i(t){try{l(a.throw(t))}catch(t){n(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(r,i)}l((a=a.apply(t,e||[])).next())}))};function i(t){return(t=t.toLowerCase()).includes("flickr")?"Flickr":t.includes("unsplash")?"Unsplash":"unknown"}function l(t,e,o,a,i){return r(this,void 0,void 0,(function*(){switch(t){case"Flickr":{const t=yield Object(s.a)(e,o,a,i);return{page:t.page,totalPages:t.pages,photos:t.photos.map(t=>({id:t.id,thumb:t.thumb,regular:t.large}))}}case"Unsplash":{const t=yield function(t,e,o,a){return n(this,void 0,void 0,(function*(){const s=new URLSearchParams({client_id:t,query:e,page:a+"",per_page:o+""}),n=yield fetch("https://api.unsplash.com/search/photos/?"+s.toString());if(!n.ok)throw new Error(n.statusText);const r=yield n.json();return{total:r.total,pages:r.total_pages,photos:r.results}}))}(e,o,a,i);return{page:i,totalPages:t.pages,photos:t.photos.map(t=>({id:t.id,thumb:t.urls.thumb,regular:t.urls.regular}))}}}return{page:0,totalPages:0,photos:[]}}))}function c(t,e,o){return r(this,void 0,void 0,(function*(){switch(t){case"Flickr":return{id:o,author:"",source:""};case"Unsplash":{const t=yield function(t,e){return n(this,void 0,void 0,(function*(){const o=new URLSearchParams({client_id:t}),a=yield fetch("https://api.unsplash.com/photos/"+e+"?"+o.toString());if(!a.ok)throw new Error(a.statusText);const s=yield a.json();return{id:s.id,width:s.width,height:s.height,tags:s.tags.map(t=>t.title),link:s.links.html,urls:s.urls,author:{name:s.user.name,username:s.user.username}}}))}(e,o);return{id:o,author:t.author.name,source:t.author.username}}}return{id:o,author:"",source:""}}))}function u(t,e,o){switch(t){case"Flickr":return"https://www.flickr.com/photo.gne?id="+e;case"Unsplash":return`https://unsplash.com/@${o}?utm_source=${a}&utm_medium=referral`}return o}function h(t){switch(i(t.url)){case"Flickr":return Object(s.b)(t.url);case"Unsplash":return t.id}return""}function d(t){switch(t){case"Flickr":return"https://www.flickr.com/";case"Unsplash":return`https://unsplash.com/?utm_source=${a}&utm_medium=referral`}return null}},323:function(t,e,o){"use strict";o.d(e,"a",(function(){return l})),o.d(e,"b",(function(){return c})),o.d(e,"c",(function(){return u}));var a=o(324),s=o.n(a),n=function(t,e,o,a){return new(o||(o=Promise))((function(s,n){function r(t){try{l(a.next(t))}catch(t){n(t)}}function i(t){try{l(a.throw(t))}catch(t){n(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(r,i)}l((a=a.apply(t,e||[])).next())}))};function r(t,e,o,a){return`https://farm${t}.static.flickr.com/${e}/${o}_${a}`}function i(t){const e=t.match(/farm([0-9]+)\.static\.flickr\.com\/([0-9]+)\/([0-9]+)_([0-9a-z]+)/);return e?{farm:Number(e[1]),server:e[2],id:e[3],secret:e[4]}:null}function l(t,e,o,a){return n(this,void 0,void 0,(function*(){const n="https://api.flickr.com/services/rest/?"+new URLSearchParams({method:"flickr.photos.search",api_key:t,format:"json",nojsoncallback:"1",license:"2,3,4,5,6,9",privacy_filter:"1",content_type:"1",text:e,sort:"relevance",per_page:Math.max(1,Math.min(500,o))+"",page:a+""}).toString(),i=(yield s.a.create().get(n)).data;if("ok"!==i.stat)throw new Error("Request failed");const l=i.photos.photo;return{page:i.photos.page,pages:i.photos.pages,perPage:i.photos.perpage,total:Number(i.photos.total),photos:l.map(t=>{const e=r(t.farm,t.server,t.id,t.secret);return{id:t.id,thumb:e+"_t.jpg",medium:e+".jpg",large:e+"_b.jpg"}})}}))}function c(t){const e=i(t);return e&&e.id}function u(t){const e=i(t);return e?r(e.farm,e.server,e.id,e.secret)+"_t.jpg":t}},334:function(t,e,o){var a=o(367);"string"==typeof a&&(a=[[t.i,a,""]]),a.locals&&(t.exports=a.locals);(0,o(318).default)("635b7542",a,!1,{})},335:function(t,e,o){"use strict";e.a=[{name:"Wolf Skull (for canis)",path:"./static/models/wolf-skull.obj",origin:"https://sketchfab.com/osuecampus"},{name:"Hyena Skull",path:"./static/models/hyena-skull.obj",origin:"https://cults3d.com/en/3d-model/various/parahyaena-brunnea-brown-hyena-skull"},{name:"Lion Skull (for big cats)",path:"./static/models/lion-skull.obj",origin:"https://sketchfab.com/aucklandmuseum"},{name:"Cat Skull (for small cats)",path:"./static/models/cat-skull.obj",origin:"https://sketchfab.com/openededinburgh"},{name:"Bear Skull",path:"./static/models/bear-skull.obj",origin:"https://sketchfab.com/geoffreymarchal"},{name:"Raccoon Skull",path:"./static/models/raccoon-skull.obj",origin:"https://sketchfab.com/3d-models/raccoon-skull-4bec9f17661542269bfe2f66ebe42361"},{name:"Skunk Skull",path:"./static/models/skunk-skull.obj",origin:"https://sketchfab.com/3d-models/skunk-skull-c82f5ecc8b5445828619cc6e8aea7457"},{name:"Wolverine Skull",path:"./static/models/wolverine-skull.obj",origin:"https://sketchfab.com/3d-models/wolverine-skull-98c8a4ac83604d1384990916da2dd440"},{name:"Opossum Skull",path:"./static/models/opossum-skull.obj",origin:"https://www.thingiverse.com/Spfaff1994/designs"},{name:"River Otter Skull",path:"./static/models/river-otter-skull.obj",origin:"https://sketchfab.com/3d-models/river-otter-skull-c17e2cd117714da7a3592c1f13ec64ac"},{name:"Sea Lion Skull",path:"./static/models/sea-lion-skull.obj",origin:"https://sketchfab.com/3d-models/sea-lion-skull-6394af7f20dd42869baf8fc6c77fe11a"},{name:"Leopard Seal Skull",path:"./static/models/leopard-seal-skull.obj",origin:"https://sketchfab.com/3d-models/leopard-seal-skull-0050849b83cc4ae09d28580030dd51be"},{name:"Kangaroo Skull",path:"./static/models/kangaroo-skull.obj",origin:"https://sketchfab.com/3d-models/kangaroowallaby-skull-62a3f3fc37064f8cb0eb839f7d03e70f"},{name:"Horse Skull",path:"./static/models/horse-skull.obj",origin:"https://sketchfab.com/openededinburgh"},{name:"Cow Skull",path:"./static/models/cow-skull.obj",origin:"https://sketchfab.com/bencva"},{name:"Sheep Skull",path:"./static/models/sheep-skull.obj",origin:"https://sketchfab.com/victorzug"},{name:"Mule Deer Skull",path:"./static/models/mule-deer-skull.obj",origin:"https://sketchfab.com/uviclib"},{name:"Elephant Skull",path:"./static/models/elephant-skull.obj",origin:"https://sketchfab.com/3d-models/african-forest-elephant-for-mobile-devices-320fd7ff1d7e450189333dc270cf12ae"},{name:"Rhino Skull",path:"./static/models/rhino-skull.obj",origin:"https://sketchfab.com/3d-models/rhinoceros-skull-dbee4f8f32fd4a96b5a021137dd4e2c6"},{name:"Pig Skull",path:"./static/models/pig-skull.obj",origin:"https://sketchfab.com/geoffreymarchal"},{name:"Capybara Skull",path:"./static/models/capybara-skull.obj",origin:"https://sketchfab.com/3d-models/capybara-skull-of-the-largest-living-rodent-77a788c945864ec39dca84a1f56601e4"},{name:"Rat Skull",path:"./static/models/rat-skull.obj",origin:"https://www.thingiverse.com/scienceminer/about"},{name:"Squirrel Skull",path:"./static/models/squirrel-skull.obj",origin:"https://sketchfab.com/3d-models/imnh-r-80-squirrel-cranium-a624d77bbfaa4c66957c78ce4ffe58d2"},{name:"Rabbit Skull",path:"./static/models/rabbit-skull.obj",origin:"https://sketchfab.com/agancz"},{name:"Bat Skull",path:"./static/models/bat-skull.obj",origin:"https://sketchfab.com/uod_museums"},{name:"Chicken Skull",path:"./static/models/chicken-skull.obj",origin:"https://sketchfab.com/misterdevious"},{name:"Hawk Skull",path:"./static/models/hawk-skull.obj",origin:"https://sketchfab.com/3d-models/red-tailed-hawk-skull-28380a6911ff4aa19ba9e7ace41240f9"},{name:"Crocodile Skull",path:"./static/models/crocodile-skull.obj",origin:"https://cults3d.com/en/users/MadScientist3D/creations"},{name:"Alligator Skull",path:"./static/models/alligator-skull.obj",origin:"https://sketchfab.com/neometrixtech"},{name:"Iguana Skull",path:"./static/models/iguana-skull.obj",origin:"https://sketchfab.com/3d-models/green-iguana-skull-ouvc-10677-1427f887e0fd41eb9c9c97e07c3610e3"},{name:"Turtle Skull",path:"./static/models/turtle-skull.obj",origin:"https://sketchfab.com/3d-models/turtle-skull-7f9ed32646e74368b09193f430423f37"},{name:"Frog Skull",path:"./static/models/frog-skull.obj",origin:"https://sketchfab.com/3d-models/frog-skull-9c491d45c73e49df8cd4277d3dc44ade"},{name:"Python Skull",path:"./static/models/python-skull.obj",origin:"https://www.tinkercad.com/things/aTogRekErps-python-skull-for-dr-close"},{name:"Dolphin Skull",path:"./static/models/dolphin-skull.obj",origin:"https://sketchfab.com/geoffreymarchal"},{name:"False Killer Whale Skull",path:"./static/models/false-killer-whale-skull.obj",origin:"https://sketchfab.com/3d-models/false-killer-whale-skull-bf444b83934243b4be0c8ddaa7b397f4"},{name:"Human Skull",path:"./static/models/human-skull.obj",origin:"https://sketchfab.com/martinjario"}]},336:function(t,e,o){"use strict";o.d(e,"a",(function(){return s})),o.d(e,"b",(function(){return n}));const a=1/180*Math.PI;function s(t,e,o){return function(t,e,o){const a=Math.cos(.5*t),s=Math.sin(.5*t),n=Math.cos(.5*e),r=Math.sin(.5*e),i=Math.cos(.5*o),l=Math.sin(.5*o);return{x:a*n*i+s*r*l,y:a*n*l-s*r*i,z:s*n*l+a*r*i,w:s*n*i-a*r*l}}(o*a,e*a,t*a)}function n(t,e){const o=t.x*e.x+t.y*e.y+t.z*e.z+t.w*e.w;return 1-o*o}},341:function(t,e,o){"use strict";var a=function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("a-spin",{staticClass:"model-viewer",style:{width:t.width+"px",height:t.height+"px"},attrs:{spinning:t.loading}},[o("canvas",{ref:"canvas",attrs:{width:t.width,height:t.height},on:{contextmenu:function(t){t.preventDefault()},mousedown:t.dragStart,mousemove:t.dragMove,mousewheel:t.mouseWheel,"&touchstart":function(e){return t.dragStart(e)},"&touchmove":function(e){return t.dragMove(e)}}}),t._v(" "),t._t("default")],2)};a._withStripped=!0;var s=o(320),n=o(364),r=o(365),i=o(12),l=function(t,e,o,a){return new(o||(o=Promise))((function(s,n){function r(t){try{l(a.next(t))}catch(t){n(t)}}function i(t){try{l(a.throw(t))}catch(t){n(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(r,i)}l((a=a.apply(t,e||[])).next())}))};const c=1/180*Math.PI,u=1/Math.PI*180;class h extends(i.a.extend({props:{width:{type:Number,default:420},height:{type:Number,default:420},preferSize:{type:Number,default:6.5},zoom:{type:Number},rotateX:{type:Number},rotateY:{type:Number},rotateZ:{type:Number},clearColor:{type:Number,default:15856628},modelUrl:String,gizmo:{type:Boolean,default:!0}},watch:{modelUrl(){this.loadModel()},rotateX(t){var e;if(null===(e=this.control)||void 0===e?void 0:e.dragging)return;const o=this.model;o&&o.rotation.setFromVector3(new s.F(this.rotateX*c,this.rotateY*c,this.rotateZ*c))},rotateY(t){var e;if(null===(e=this.control)||void 0===e?void 0:e.dragging)return;const o=this.model;o&&o.rotation.setFromVector3(new s.F(this.rotateX*c,this.rotateY*c,this.rotateZ*c))},rotateZ(t){var e;if(null===(e=this.control)||void 0===e?void 0:e.dragging)return;const o=this.model;o&&o.rotation.setFromVector3(new s.F(this.rotateX*c,this.rotateY*c,this.rotateZ*c))},zoom(t){const e=this.camera;e&&(e.position.z=20-t)},gizmo(t){this.control.visible=this.control.enabled=t}},data:()=>({loading:!1,dragging:!1,dragStartX:0,dragStartY:0}),mounted(){const t=this;window.modelViewer=this;(t.renderer=new s.G({canvas:this.$refs.canvas})).setClearColor(this.clearColor);const e=t.scene=new s.C,o=t.camera=new s.w(45,this.width/this.height);o.position.set(0,0,20-this.zoom),o.lookAt(new s.F(0,0,0)),e.add(o);const a=new s.f(16777215);a.position.set(0,5,5),e.add(a);const i=t.control=new n.a(o,this.$refs.canvas);i.setSpace("local"),i.setMode("rotate"),i.setSize(2),i.visible=i.enabled=this.gizmo,i.addEventListener("dragging-changed",()=>{const e=t.model;e&&(this.$emit("update:rotateX",Math.round(e.rotation.x*u)),this.$emit("update:rotateY",Math.round(e.rotation.y*u)),this.$emit("update:rotateZ",Math.round(e.rotation.z*u)))}),e.add(i);const l=setInterval(this.render,1e3/30);window.addEventListener("mouseup",this.dragStop),window.addEventListener("touchend",this.dragStop),this.$on("hook:beforeDestroy",()=>{clearInterval(l),window.removeEventListener("mouseup",this.dragStop),window.removeEventListener("touchend",this.dragStop)}),t.loader=new r.a,this.modelUrl&&this.loadModel()},methods:{loadOBJ(t){const e=this;return new Promise((o,a)=>{if(!e.loader)throw new Error("Not initialized");e.loader.load(t,o,void 0,a)})},loadModel(){return l(this,void 0,void 0,(function*(){try{this.loading=!0;const t=yield this.loadOBJ(this.modelUrl),e=this;e.model&&(e.control.detach(),e.scene.remove(e.model),e.model=void 0),t.traverse(t=>{if(t instanceof s.r){const e=t.material;e instanceof s.p?e.side=s.g:e.forEach(t=>{t.side=s.g})}});const o=t.children[0],a=new s.F;(new s.a).setFromObject(t).getSize(a);const n=this.preferSize/Math.max(a.x,a.y,a.z);o.scale.set(n,n,n);const r=new s.F;(new s.a).setFromObject(t).getCenter(r),o.position.set(-r.x,-r.y,-r.z),t.rotation.set(this.rotateX*c,this.rotateY*c,this.rotateZ*c),e.model=t,e.scene.add(t),e.control.attach(t)}finally{this.loading=!1}}))},render(){this.renderer.render(this.scene,this.camera)},dragStart(t){this.gizmo||(this.dragging=!0,this.dragStartX=t.clientX||t.touches&&t.touches[0].clientX,this.dragStartY=t.clientY||t.touches&&t.touches[0].clientY)},dragStop(){this.dragging=!1},dragMove(t){if(!this.dragging)return;const e=this.dragStartX,o=this.dragStartY,a=t.clientX||t.touches&&t.touches[0].clientX,s=t.clientY||t.touches&&t.touches[0].clientY,n=a-e,r=s-o;let i=this.rotateX,l=this.rotateY;this.dragStartX=a,this.dragStartY=s,i+=r,i<-180?i+=360:i>180&&(i-=360),l+=n,l<-180?l+=360:l>180&&(l-=360),this.$emit("update:rotateX",0|i),this.$emit("update:rotateY",0|l)},mouseWheel(t){const e=Math.max(-1,Math.min(1,-t.deltaY));this.$emit("update:zoom",Math.min(20,Math.max(0,this.zoom+e)))}}})){}var d=h,m=(o(366),o(101)),p=Object(m.a)(d,a,[],!1,null,"4ef7cf1b",null);p.options.__file="src/components/ModelViewer.vue";e.a=p.exports},366:function(t,e,o){"use strict";o(334)},367:function(t,e,o){(e=o(18)(!1)).push([t.i,".model-viewer[data-v-4ef7cf1b]{position:relative}.model-viewer canvas[data-v-4ef7cf1b]{cursor:grab}",""]),t.exports=e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,