(this.webpackJsonp=this.webpackJsonp||[]).push([[5],{314:function(t,e,i){"use strict";i.r(e);var a=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"wrapper"},[i("div",{staticClass:"column condition",class:{collapsed:t.collapseSearchConditions}},[i("div",{staticClass:"inner-wrapper"},[i("h4",[t._v("Species:")]),t._v(" "),i("div",{staticClass:"row",staticStyle:{"margin-bottom":"8px"}},[i("a-spin",{staticStyle:{flex:"1 1","min-width":"0"},attrs:{spinning:t.loading}},[i("a-select",{staticStyle:{width:"100%"},attrs:{placeholder:"any","show-search":""},model:{value:t.keyword,callback:function(e){t.keyword=e},expression:"keyword"}},[i("a-select-option",{key:""},[t._v("any")]),t._v(" "),t._l(t.tags,(function(e){return i("a-select-option",{key:e},[t._v(t._s(e))])}))],2)],1),t._v(" "),i("a-button",{attrs:{type:"primary"},on:{click:t.search}},[t._v("Search")])],1),t._v(" "),i("h4",[t._v("Direction: (skull type does not affect search results)")]),t._v(" "),i("div",{staticClass:"row"},[i("a-select",{staticStyle:{width:"100%"},attrs:{"show-search":""},model:{value:t.model.url,callback:function(e){t.$set(t.model,"url",e)},expression:"model.url"}},t._l(t.models,(function(e){return i("a-select-option",{key:e.path,attrs:{value:e.path}},[t._v("\n                        "+t._s(e.name)+"\n                    ")])})),1)],1),t._v(" "),i("model-viewer",{attrs:{"model-url":t.model.url,"rotate-x":t.model.rotateX,"rotate-y":t.model.rotateY,"rotate-z":t.model.rotateZ,zoom:t.model.zoom,width:t.modelViewerSize,height:t.modelViewerSize,gizmo:t.model.gizmo},on:{"update:rotateX":function(e){return t.$set(t.model,"rotateX",e)},"update:rotate-x":function(e){return t.$set(t.model,"rotateX",e)},"update:rotateY":function(e){return t.$set(t.model,"rotateY",e)},"update:rotate-y":function(e){return t.$set(t.model,"rotateY",e)},"update:rotateZ":function(e){return t.$set(t.model,"rotateZ",e)},"update:rotate-z":function(e){return t.$set(t.model,"rotateZ",e)},"update:zoom":function(e){return t.$set(t.model,"zoom",e)}}},[t.modelAuthorLink?i("a",{staticStyle:{position:"absolute",right:"8px",top:"8px","line-height":"14px"},attrs:{target:"_blank",title:"Author of this model",href:t.modelAuthorLink}},[i("a-icon",{attrs:{type:"info-circle"}})],1):t._e()]),t._v(" "),i("div",{staticClass:"row"},[i("a-checkbox",{model:{value:t.model.gizmo,callback:function(e){t.$set(t.model,"gizmo",e)},expression:"model.gizmo"}},[t._v("Gizmo")]),t._v(" "),i("span",[t._v("X: "+t._s(t.model.rotateX)+"; Y: "+t._s(t.model.rotateY)+"; Z: ")]),t._v(" "),i("a-slider",{staticStyle:{flex:"1 1","min-width":"0"},attrs:{included:!1,min:-180,max:180},model:{value:t.model.rotateZ,callback:function(e){t.$set(t.model,"rotateZ",e)},expression:"model.rotateZ"}}),t._v(" "),i("div",[i("span",{staticStyle:{width:"2.5em","text-align":"center",display:"inline-block"}},[t._v(t._s(t.model.rotateZ))]),t._v(" "),i("a-button",{attrs:{size:"small"},on:{click:function(e){t.model.rotateX=t.model.rotateY=t.model.rotateZ=0}}},[t._v("\n                        Reset\n                    ")])],1)],1),t._v(" "),t._m(0)],1),t._v(" "),i("div",{staticClass:"collapse-handler",on:{click:function(e){t.collapseSearchConditions=!t.collapseSearchConditions}}},[i("a-icon",{staticClass:"icon",attrs:{type:"up"}})],1)]),t._v(" "),i("div",{staticClass:"column result"},[i("div",{staticClass:"list"},t._l(t.result,(function(e){return i("image-thumb",{key:e.url,staticClass:"item",attrs:{image:e,size:200},nativeOn:{click:function(i){return t.show(e)}}})})),1)]),t._v(" "),i("image-viewer",{attrs:{show:t.large.show,"image-url":t.large.imageUrl,flip:t.large.flip,id:t.large.id,author:t.large.author,source:t.large.source},on:{"update:show":function(e){return t.$set(t.large,"show",e)}}})],1)};a._withStripped=!0;var o=i(12),r=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("a-spin",{staticClass:"thumb",attrs:{spinning:t.loading}},[i("div",{staticClass:"thumb-inner-wrapper",class:{flip:this.image&&t.image.flip},style:{width:t.size+"px",height:t.size+"px"}},[t.image&&t.image.url?i("img",{style:t.imgStyle,attrs:{src:t.image.url,alt:""}}):t._e(),t._v(" "),t._t("default")],2)])};r._withStripped=!0;class n extends(o.a.extend({data:()=>({loading:!1,handlerRemoved:!1}),props:{image:Object,size:{type:Number,default:160}},computed:{imgStyle(){const t=this.image;if(!t||!t.url)return{};const e=1/t.cs*this.size;return{width:t.w*e+"px",height:t.h*e+"px",left:-t.cx*e+"px",top:-t.cy*e+"px"}}},mounted(){const t=this.parent=function t(e){if(null!=e)return e.scrollHeight>e.clientHeight?e:t(e.parentNode)}(this.$el);document.addEventListener("scroll",this.checkVisibilityChange,!1),document.addEventListener("resize",this.checkVisibilityChange,!1),null==t||t.addEventListener("scroll",this.checkVisibilityChange,!1),this.checkVisibilityChange()},methods:{checkVisibilityChange(){var t;if(function(t){const e=t.getBoundingClientRect(),i=e.right-e.left,a=e.bottom-e.top;return e.top>-a&&e.left>-i&&e.bottom<(window.innerHeight||document.documentElement.clientHeight)+a&&e.right<(window.innerWidth||document.documentElement.clientWidth)+i}(this.$el)){this.loading=!0;const e=new Image;e.onload=()=>{this.loading=!1},e.onerror=()=>{this.loading=!1},e.src=null===(t=this.image)||void 0===t?void 0:t.url,this.removeHandlers()}},removeHandlers(){var t;if(this.handlerRemoved)return;document.removeEventListener("scroll",this.checkVisibilityChange),document.removeEventListener("resize",this.checkVisibilityChange);null===(t=this.parent)||void 0===t||t.removeEventListener("scroll",this.checkVisibilityChange),this.handlerRemoved=!0}}})){}var s=n,l=(i(342),i(101)),c=Object(l.a)(s,r,[],!1,null,"3e22842a",null);c.options.__file="src/components/ImageThumb.vue";var d=c.exports,h=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"image-viewer-mask"},[t.show?i("div",{staticClass:"image-viewer",on:{click:function(e){return e.target!==e.currentTarget?null:t.close(e)}}},[i("img",{style:t.imgStyle,attrs:{src:t.imageUrl,alt:""}}),t._v(" "),i("div",{staticClass:"btn-close",on:{click:t.close}},[i("a-icon",{attrs:{type:"close"}})],1),t._v(" "),i("div",{staticClass:"author-info"},[t.author?i("div",[t._v("\n                Photo by "),i("a",{attrs:{href:t.authorLink,target:"_blank"}},[t._v(t._s(t.author))]),t._v("\n                on "),i("a",{attrs:{href:t.sourceLink,target:"_blank"}},[t._v(t._s(t.sourceType))])]):t._e(),t._v(" "),!t.author&&t.sourceType?i("div",[i("a",{attrs:{href:t.authorLink,target:"_blank"}},[t._v("View this photo on "+t._s(t.sourceType))])]):t._e()])]):t._e()])};h._withStripped=!0;var p=i(321);class u extends(o.a.extend({props:{show:Boolean,imageUrl:String,id:String,author:String,source:String,flip:{type:Boolean,default:!1}},data:()=>({width:0,height:0,zoom:1}),watch:{imageUrl(t){this.width=0,this.height=0,this.zoom=1;const e=new Image;e.onload=()=>{this.width=e.width,this.height=e.height;const t=.9*document.documentElement.clientWidth,i=.9*document.documentElement.clientHeight;this.zoom=Math.min(t/e.width,i/e.height,1)},e.src=t}},computed:{imgStyle(){return{"margin-left":-(this.width/2|0)+"px","margin-top":-(this.height/2|0)+"px",transform:`scaleX(${this.zoom*(this.flip?-1:1)}) scaleY(${this.zoom})`}},sourceType(){return Object(p.d)(this.imageUrl)},sourceLink(){return Object(p.e)(this.sourceType)||""},authorLink(){return Object(p.b)(this.sourceType,this.id,this.source)}},methods:{close(){this.$emit("update:show",!1)}}})){}var m=u,g=(i(362),Object(l.a)(m,h,[],!1,null,"5567e6cd",null));g.options.__file="src/components/ImageViewer.vue";var v=g.exports,f=i(341),w=i(335),x=i(336),b=function(t,e,i,a){return new(i||(i=Promise))((function(o,r){function n(t){try{l(a.next(t))}catch(t){r(t)}}function s(t){try{l(a.throw(t))}catch(t){r(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(n,s)}l((a=a.apply(t,e||[])).next())}))};class _ extends(o.a.extend({components:{ModelViewer:f.a,ImageThumb:d,ImageViewer:v},data:()=>({loading:!1,modelViewerSize:360,models:w.a,data:[],model:{url:w.a[0].path,rotateX:0,rotateY:0,rotateZ:0,zoom:10,gizmo:!0},keyword:"",result:[],collapseSearchConditions:!1,large:{show:!1,imageUrl:"",flip:!1,id:"",author:"",source:""}}),computed:{tags(){const t={};return this.data.forEach(e=>e.tags.forEach(e=>{t[e]=!0})),Object.keys(t).sort()},modelAuthorLink(){var t;return(null===(t=this.models.find(t=>t.path===this.model.url))||void 0===t?void 0:t.origin)||""}},mounted(){return b(this,void 0,void 0,(function*(){try{this.loading=!0,this.data=(yield i.e(0).then(i.bind(null,374))).default}finally{this.loading=!1}}))},methods:{search(){let t=this.keyword?this.data.filter(t=>{var e;return null===(e=t.tags)||void 0===e?void 0:e.includes(this.keyword)}):this.data;const e=Object(x.a)(this.model.rotateX+180,this.model.rotateY+180,this.model.rotateZ+180),i=t.map(t=>{const i=t.ry*this.model.rotateY<0,a=t.rx,o=i?-t.ry:t.ry,r=i?-t.rz:t.rz,n=Object(x.b)(e,Object(x.a)(a+180,o+180,r+180));return Object.assign(Object.assign({},t),{flip:i,ry:o,rz:r,match:n})});i.sort((t,e)=>t.match-e.match),this.result=i.slice(0,Math.min(i.length,30)),this.collapseSearchConditions=!0},show(t){this.large.imageUrl=t.url,this.large.flip=t.flip,this.large.show=!0,this.large.id=Object(p.c)(t)||"",this.large.author=t.au||"",this.large.source=t.src||""}}})){}var y=_,k=(i(368),Object(l.a)(y,a,[function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"info",staticStyle:{color:"#bfbfbf"}},[i("div",[t._v("Author: x6udpngx")]),t._v(" "),i("div",[t._v("\n                    Special Thanks: "),i("a",{attrs:{href:"https://github.com/xrabohrok",target:"_blank"}},[t._v("xrabohrok")]),t._v("\n                    - Thank you for helping improve this tool!\n                ")]),t._v(" "),i("div",[t._v("Latest update: 2023-07-11")]),t._v(" "),i("div",[i("a",{attrs:{href:"https://github.com/x6ud/x6ud.github.io/issues",target:"_blank"}},[t._v("Leave a message")])]),t._v(" "),i("div",[i("a",{attrs:{href:"https://github.com/x6ud/search-photos-by-model-tool",target:"_blank"}},[t._v("Source code")])]),t._v(" "),i("div",[i("span",[t._v("Support me:")]),t._v(" "),i("a",{attrs:{href:"https://ko-fi.com/x6udpngx",target:"_blank"}},[i("span",{staticStyle:{"vertical-align":"middle"}},[t._v("Ko-fi.com/x6udpngx")])])])])}],!1,null,"1a1d373c",null));k.options.__file="src/views/Search.vue";e.default=k.exports},322:function(t,e,i){var a=i(343);"string"==typeof a&&(a=[[t.i,a,""]]),a.locals&&(t.exports=a.locals);(0,i(318).default)("c88ea1a6",a,!1,{})},333:function(t,e,i){var a=i(363);"string"==typeof a&&(a=[[t.i,a,""]]),a.locals&&(t.exports=a.locals);(0,i(318).default)("12c11aff",a,!1,{})},337:function(t,e,i){var a=i(369);"string"==typeof a&&(a=[[t.i,a,""]]),a.locals&&(t.exports=a.locals);(0,i(318).default)("613e3fed",a,!1,{})},342:function(t,e,i){"use strict";i(322)},343:function(t,e,i){(e=i(18)(!1)).push([t.i,".thumb[data-v-3e22842a]{display:inline-block}.thumb .thumb-inner-wrapper[data-v-3e22842a]{position:relative;background-color:#f2f2f2;overflow:hidden}.thumb .thumb-inner-wrapper.flip[data-v-3e22842a]{transform:scale(-1, 1);transform-origin:50% 50%}.thumb .thumb-inner-wrapper img[data-v-3e22842a]{position:absolute}",""]),t.exports=e},362:function(t,e,i){"use strict";i(333)},363:function(t,e,i){(e=i(18)(!1)).push([t.i,".image-viewer-mask[data-v-5567e6cd]{position:fixed;z-index:1000;left:0;top:0;max-width:0;max-height:0}.image-viewer-mask .image-viewer[data-v-5567e6cd]{position:fixed;z-index:1000;left:0;top:0;right:0;bottom:0;background-color:rgba(0,0,0,.5);overflow:hidden}.image-viewer-mask .image-viewer img[data-v-5567e6cd]{position:absolute;left:50%;top:50%;transform-origin:50% 50%;box-shadow:0 0 12px rgba(0,0,0,.5)}.image-viewer-mask .image-viewer .flickr-link[data-v-5567e6cd]{display:block;position:absolute;z-index:1;top:8px;right:48px;color:#fff;line-height:24px}.image-viewer-mask .image-viewer .flickr-link[data-v-5567e6cd]:hover{text-decoration:underline}.image-viewer-mask .image-viewer .btn-close[data-v-5567e6cd]{position:absolute;top:8px;right:8px;z-index:1;cursor:pointer;font-size:16px;color:#fff;width:24px;height:24px;line-height:24px;text-align:center;vertical-align:middle;border-radius:100%;background-color:rgba(0,0,0,.35)}.image-viewer-mask .image-viewer .author-info[data-v-5567e6cd]{display:flex;align-items:center;justify-content:center;position:absolute;z-index:1;left:0;right:0;bottom:0;height:30px;font-size:16px;color:#fff;font-style:italic}.image-viewer-mask .image-viewer .author-info a[data-v-5567e6cd]{color:#fff;text-decoration:underline}",""]),t.exports=e},368:function(t,e,i){"use strict";i(337)},369:function(t,e,i){(e=i(18)(!1)).push([t.i,".wrapper[data-v-1a1d373c]{display:flex;align-items:flex-start;width:100%;height:100%;box-sizing:border-box;padding:10px}.wrapper .column[data-v-1a1d373c]{display:flex;flex-direction:column}.wrapper .column[data-v-1a1d373c]:not(:last-child){margin-right:10px}.wrapper .column .row[data-v-1a1d373c]{display:flex;width:100%;align-items:center}.wrapper .column .row[data-v-1a1d373c]:not(:last-child){margin-bottom:.5em}.wrapper .column .row>*[data-v-1a1d373c]:not(:last-child){min-width:0;margin-right:.5em}.wrapper .column.condition[data-v-1a1d373c]{flex:0 0 360px;width:360px}.wrapper .column.condition .inner-wrapper[data-v-1a1d373c]{display:flex;flex-direction:column;flex:1 1;min-height:0;width:100%}.wrapper .column.condition .collapse-handler[data-v-1a1d373c]{display:none}.wrapper .column.result[data-v-1a1d373c]{flex:1 1;min-width:0;height:100%}.wrapper .column.result .list[data-v-1a1d373c]{width:100%;height:100%;overflow-y:scroll;box-sizing:border-box;border:1px solid #d9d9d9;border-radius:4px;padding:10px}.wrapper .column.result .list .item[data-v-1a1d373c]{margin:5px;cursor:zoom-in}@media screen and (max-width: 480px){.wrapper[data-v-1a1d373c]{display:block !important;overflow:hidden;position:relative;box-sizing:border-box;width:100%;height:100%;padding:0 !important}.wrapper .column.condition[data-v-1a1d373c]{position:fixed;left:0;top:0;z-index:1;width:100%;height:100%;box-sizing:border-box;background-color:#fff;overflow:auto;transition:height .3s}.wrapper .column.condition .inner-wrapper[data-v-1a1d373c]{width:360px;margin:0 auto;padding:10px 0}.wrapper .column.condition .collapse-handler[data-v-1a1d373c]{display:block !important;position:fixed;left:50%;top:100%;width:48px;height:48px;margin:24px 0 0 24px;border-radius:100%;overflow:hidden;background-color:rgba(0,0,0,.2);color:#fff;font-size:20px;text-align:center}.wrapper .column.condition .collapse-handler .icon[data-v-1a1d373c]{width:48px}.wrapper .column.condition.collapsed[data-v-1a1d373c]{height:0 !important}.wrapper .column.condition.collapsed .collapse-handler[data-v-1a1d373c]{top:0 !important}.wrapper .column.condition.collapsed .collapse-handler .icon[data-v-1a1d373c]{transform-origin:50% 50%;transform:rotate(180deg);margin-top:24px}}",""]),t.exports=e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,